{
  
    
        "post0": {
            "title": "Cross Entropy Demistified",
            "content": "Understanding “Entropy”, “Cross-Entropy Loss” and “KL Divergence” . Classification is one of the preliminary steps in most Machine Learning and Deep learning projects and Cross-Entropy Loss is the most commonly used loss function, but have you ever tried to explore what is cross-entropy or entropy exactly. . Ever imagined why cross-entropy works for classification? . This series of articles consisting of 2 parts is designed to explain in detail the intuition behind what is cross-entropy and why cross-entropy has been used as the most popular cost function for classification. . Before diving into cross-entropy loss and its application to classification, the concept of entropy and cross-entropy must be clear, so this article is dedicated to exploring what these 2 terms mean. . The content and images in this post are inspired by the amazing tutorial A Short Introduction to Entropy, Cross-Entropy and KL-Divergence by Aurélien Géron . Entropy . The concept of entropy and cross-entropy comes from Claude Shannon’s Information theory which he introduces through his classical paper “A Mathematical Theory of Communication” . According to Shannon, Entropy is the minimum no of useful bits required to transfer information from a sender to a receiver. . Let’s understand the two terms by looking into an example. . Suppose that we need to share the weather information of a place with another friend who stays in a different city, and the weather has a 50–50 chance of being sunny or rainy every day. . . This information can be transmitted using just a single bit (0 or 1) and the uncertainty associated with this event is 2 as there are 2 possibilities, either weather is sunny or rainy. . If the probability of occurrence of an event is p, then the uncertainty raised due to that event is given as 1/p . In our example, the probability of occurrence of both events is 0.5 so the uncertainty for each event is 1/0.5 = 2 . Even if the information is transferred as a string “RAINY” having 5 characters each of 1 byte, the total information transferred is 40 bits but only 1 bit of useful information is transferred. . Given the uncertainty due to an event is N, the minimum number of bits required to transfer the information about that event can be calculated as log(N) . Here, as uncertainty for weather being rainy or sunny is 2, the minimum no. of useful bits required to transfer information about being sunny or rainy is log(2) = 1 . Note : In the article, log(x) means logarithm with base 2 and ln(x) means natural logarithm with base e . Now suppose that the event “Weather” had 8 possibilities, all equally likely with 12.5% probability of occurrence of each. . . So now as the no. of uncertainties is 8, the minimum no. of useful bits required to transfer information about each event can be calculated as log(8) = 3 . Let us consider a case which is similar to the 1st case that we saw with 2 possibilities, sunny or rainy, but now both are not equally likely. One occurs with a probability of 75% and the other with a probability of 25%. . . Now the events are not occuring with equal probabilities, so the uncertainties for the events will be different. the uncertainty of the weather being rainy is 1/0.25 = 4 and for the weather being sunny is 1/0.75 = 1.33 . The minimum number of useful bits required the information is rainy is log(4) = 2 and for the weather being sunny is log(1.33) = 0.4 . This also be derived from the probability directly as, given the probability of a given event is p, then the uncertainty associated with the occurrence of that event is 1/p and hence the minimum number of useful bits required to transfer information about it is log(1/p) or -log(p), since [log(1/p) = -log(p)] . 2 bits are required to say whether the weather is rainy and 0.4 bits are required to say if the weather is sunny, so the average no. of useful bits required to transmit the information can be calculated as, . 0.75* log(1/0.75) + 0.25*log(1/0.25) = 0.81 . So on average, we would receive 0.81 bits of information and this is the minimum number of bits required to transfer the weather information, following the above-mentioned probability distribution.This is known as Entropy. . . Entropy (expressed in ‘bits’) is a measure of how unpredictable the probability distribution is. So more the individual events vary, the more is its entropy. . Cross-Entropy . Cross entropy is the average message length that is used to transmit the message. . . In thiAdvanced Optimization: Theory and . Applications (*CT)s example, there are 8 variations all equally likely. So the entropy of this system is 3, but suppose that the probability distribution changes with probabilities something like this : . . Though the probability distribution has changed, we still use 3 bits to transfer this information. . Now the entropy of this distribution will be, . E = — { 0.35*log(0.35) + 0.35*log(0.35) + 0.1*log(0.1) + 0.1*log(0.1) + 0.04*log(0.04) + 0.04*log(0.04) + 0.01*log(0.01) + 0.01*log(0.01) } = 2.23 bits , which is the minimum number of useful bits transmitted, and entropy of the system. . So though we are sending 3 bits of information, the user gets 2.23 useful bits. This can be improved by changing the no. of bits used to address each kind of information. Suppose we use a following distribution : . . The average no. of bits transmitted using the following bit pattern is, . CE = 0.35*2 + 0.35*2 + 0.1*3 + 0.1*3 + 0.04*4 + 0.04*4 + 0.01*5 + 0.01*5 = 2.42 bits , which is close to the entropy. This is the Cross Entropy . But suppose the same bit pattern is used for a different probability distribution : . . CE = 0.01*2 + 0.01*2 + 0.04*3 + 0.04*3 + 0.1*4 + 0.1*4 + 0.35*5 + 0.35*5 =4.58 bits , which is significantly grater than the entropy. . This happens because the bit code we are using is making some implicit estimation of the probability distribution of the weather as, . . So we can express cross-entropy as a function of both the true distribution and predicted distribution as, . . Here instead of taking the log of the true probability, we are taking the log of the predicted probability distribution q. . Basically, when we know the probability of occurrence of the events, but we don’t know the bit distribution of the events, so a random distribution can be taken and given the probabilities and assumed bit distribution, cross-entropy of the events can be calculated and cross-checked with the original entropy to see if the assumed distribution gives the minimum uncertainty for the given probabilities or not. Hence it is termed as “cross” entropy . Usually Cross entropy is larger than the entropy of a distribution. When the predicted distribution is equal to true distribution, the cross-entropy is equal to entropy. . Kullback–Leibler Divergence . The amount by which the cross-entropy exceeds the entropy is called Relative Entropy or commonly known as Kullback-Leibler Divergence or KL Divergence. . . So the key take away from this article is, given a probability distribution, the minimum average no. of useful bits required to transfer the information about the distribution is its Entropy which can also be said as the minimum possible randomness that can be associated with a probability distribution. . In the last example, we took an assumed bit distribution for each event and found the cross-entropy of that distribution with the original probabilities of the events. This cross-entropy resulted to be higher than the original entropy. So we tried to change the assumed bit distribution so that we can reduce the cross-entropy and make it as close as possible to the entropy. . But wait for a second !! . Isn’t that exactly what we try to do in a classification? . We start with a randomly initialized model that outputs an assumed bit distribution for the different classes that we want to classify, and in the process of training, we try to achieve an optimal distribution that can get us close enough to the lowest possible Entropy for the probability distribution. . So does that mean cross-entropy can be used to quantify how bad is the model performing in assuming the distribution? . Can we use KL Divergence as a metric to measure how bad the model is performing? . In the subsequent article, we shall explore the answer to all these questions and understand the intuition behind why Cross-Entropy is an appropriate loss function for our requirement. . Got some doubts/suggestions? . Please feel free to share your suggestions, questions, queries, and doubts through comments below — I will be happy to talk/discuss them all. .",
            "url": "https://saiamrit.github.io/technical-blog/2021/05/12/Cross-Entropy-Demistified.html",
            "relUrl": "/2021/05/12/Cross-Entropy-Demistified.html",
            "date": " • May 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Food Image Classification (with Hyperparameters Experiments)",
            "content": "import numpy as np import pandas as pd import torch import pickle import torch.nn.functional as F from torch.utils.data import Dataset, DataLoader from torchvision import transforms, utils . import pickle class FoodDataset(Dataset): &quot;&quot;&quot;Food dataset.&quot;&quot;&quot; def __init__(self, root_dir, transform=None): &quot;&quot;&quot; Args: root_dir (string): Directory with all the images. transform (callable, optional): Optional transform to be applied num_points (int): Number of points to sample in the object point cloud from the data on a sample. &quot;&quot;&quot; self.root_dir = root_dir self.transform = transform with open(self.root_dir, &#39;rb&#39;) as f: d = pickle.load(f) self.data = d[:500] def __len__(self): return len(self.data) def __getitem__(self, idx): # Fetch the file path and setup image folder paths sample = self.data[idx] sample = [ torch.from_numpy(sample[0]).float().transpose(1, 2).transpose(0, 1), torch.from_numpy(np.array(sample[1])) ] if self.transform: sample[0] = self.transform(sample[0]) return sample . data_transform = transforms.Compose([ transforms.RandomRotation(45), transforms.RandomHorizontalFlip(), transforms.RandomAffine(degrees=30, translate=(0.5,0.5)), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) ]) . train_dataset = FoodDataset(root_dir=&#39;./train_data.pickle&#39;, transform=None) print(len(train_dataset)) train_dataloader = DataLoader(train_dataset, batch_size=256, shuffle=True, num_workers=0) print(len(train_dataloader)) test_dataset = FoodDataset(root_dir=&#39;./dev_data.pickle&#39;) print(len(test_dataset)) test_dataloader = DataLoader(test_dataset, batch_size=64, shuffle=True, num_workers=0) print(len(test_dataloader)) . import torch.nn as nn class CNNModel(nn.Module): def __init__(self): super(CNNModel, self).__init__() # Convolution 1 self.cnn1 = nn.Conv2d(in_channels=3, out_channels=16, kernel_size=5, stride=1, padding=2) self.bn1 = nn.BatchNorm2d(16) self.relu1 = nn.ReLU() # Max pool 1 self.maxpool1 = nn.MaxPool2d(kernel_size=2) # Convolution 2 self.cnn2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2) self.bn2 = nn.BatchNorm2d(32) self.relu2 = nn.ReLU() # Max pool 2 self.maxpool2 = nn.MaxPool2d(kernel_size=2) # Convolution 3 self.cnn3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5, stride=1, padding=2) self.bn3 = nn.BatchNorm2d(64) self.relu3 = nn.ReLU() # Max pool 3 self.maxpool3 = nn.MaxPool2d(kernel_size=2) # Convolution 4 self.cnn4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=5, stride=1, padding=2) self.bn4 = nn.BatchNorm2d(128) self.relu4 = nn.ReLU() # Max pool 4 self.maxpool4 = nn.MaxPool2d(kernel_size=2) # Dropout self.dropout = nn.Dropout(0.6) self.fc1 = nn.Linear(128 * 5 * 5, 512) self.fc2 = nn.Linear(512, 61) def forward(self, x): # Convolution 1 out = self.cnn1(x) out = self.bn1(out) out = self.relu1(out) # Max pool 1 out = self.maxpool1(out) # out = self.dropout(out) # Convolution 2 out = self.cnn2(out) out = self.bn2(out) out = self.relu2(out) # Max pool 2 out = self.maxpool2(out) # out = self.dropout(out) # Convolution 3 out = self.cnn3(out) out = self.bn3(out) out = self.relu3(out) # Max pool 3 out = self.maxpool3(out) # out = self.dropout(out) # Convolution 4 out = self.cnn4(out) out = self.bn4(out) out = self.relu4(out) # Max pool 4 out = self.maxpool4(out) # out = self.dropout(out) # Resize out = out.view(out.size(0), -1) # Linear layers out = self.fc1(out) out = F.log_softmax(self.fc2(out)) probs = F.log_softmax(out, dim=1) return out, probs . device = torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;) print(device) learning_rate = 0.001 num_epochs = 50 . cuda:0 . model = CNNModel() model = model.to(device) criterion = nn.NLLLoss() optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) . model . CNNModel( (cnn1): Conv2d(3, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2)) (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu1): ReLU() (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (cnn2): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2)) (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu2): ReLU() (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (cnn3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2)) (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu3): ReLU() (maxpool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (cnn4): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2)) (bn4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu4): ReLU() (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (dropout): Dropout(p=0.6, inplace=False) (fc1): Linear(in_features=3200, out_features=512, bias=True) (fc2): Linear(in_features=512, out_features=61, bias=True) ) . import time import torch.nn.functional as F def compute_accuracy(model, data_loader): correct_pred, num_examples = 0, 0 for features, targets in data_loader: features = features.to(device) targets = targets.to(device) logits, probas = model(features) _, predicted_labels = torch.max(probas, 1) num_examples += targets.size(0) correct_pred += (predicted_labels == targets).sum() return correct_pred.float()/num_examples * 100 start_time = time.time() loss = [] train_accuracy = [] test_accuracy = [] for epoch in range(num_epochs): model = model.train() for batch_idx, (features, targets) in enumerate(train_dataloader): features = features.to(device) targets = targets.to(device) ### FORWARD AND BACK PROP logits, probas = model(features) cost = F.cross_entropy(logits, targets) optimizer.zero_grad() cost.backward() compute_accuracy(model, train_dataloader) ### UPDATE MODEL PARAMETERS optimizer.step() ### LOGGING if not batch_idx % 50: print (&#39;Epoch: %03d/%03d | Batch %03d/%03d | Cost: %.4f&#39; %(epoch+1, num_epochs, batch_idx, len(train_dataloader), cost)) loss.append(cost) model = model.eval() tr_acc = compute_accuracy(model, train_dataloader) test_acc = compute_accuracy(model, test_dataloader) print(&#39;Epoch: %03d/%03d training accuracy: %.2f%%&#39; % ( epoch+1, num_epochs, tr_acc)) train_accuracy.append(tr_acc) test_accuracy.append(test_acc) print(&#39;Time elapsed: %.2f min&#39; % ((time.time() - start_time)/60)) print(&#39;Total Training Time: %.2f min&#39; % ((time.time() - start_time)/60)) . No batchnorm and no dropout . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . with batchnorm but no dropout . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . with batchnorm and dropout . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Log Softmax Activation and NLL Loss . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Sigmoid activation . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . ReLU activation . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Tanh activation . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Average Pooling . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Max pooling . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Adam Optimizer . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . SGD optimizer . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Adagrad Optimizer . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Adadelta optimizer . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . RMSProp optimizer . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() . Augmentations applied . import matplotlib.pyplot as plt plt.plot(loss, label = &#39;Train loss&#39;) plt.plot(train_accuracy, label = &#39;Train accuracy&#39;) plt.plot(test_accuracy, label = &#39;Validation accuracy&#39;) plt.legend() plt.show() .",
            "url": "https://saiamrit.github.io/technical-blog/2021/04/11/classification.html",
            "relUrl": "/2021/04/11/classification.html",
            "date": " • Apr 11, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Viola Jones Implementation from Scratch",
            "content": "Data available at : https://drive.google.com/drive/folders/1UBGUwLAqbtt03RtVhSMrD-AAOOWV3oLr?usp=sharing . import numpy as np # from PIL import Image import os import cv2 from functools import partial from multiprocessing import Pool . pos_training_path = &#39;../face_data/small_data/face/pos_integral.npy&#39; neg_training_path = &#39;../face_data/small_data/non/neg_integral.npy&#39; . faces_int_img_training = np.load(pos_training_path)[:500] non_faces_int_img_training = np.load(neg_training_path)[:500] faces_int_img_test = np.load(pos_training_path)[800:900] non_faces_int_img_test = np.load(neg_training_path)[800:900] . print(np.shape(faces_int_img_training)) print(np.shape(non_faces_int_img_training)) print(np.shape(faces_int_img_test)) print(np.shape(non_faces_int_img_test)) . (500, 50, 50) (500, 50, 50) (100, 50, 50) (100, 50, 50) . num_classifiers = 20 min_height = 4 max_height = 10 min_width = 4 max_width = 10 . def enum(**enums): return type(&#39;Enum&#39;, (), enums) FeatureType = enum(TWO_VERTICAL=(1, 2), TWO_HORIZONTAL=(2, 1), THREE_HORIZONTAL=(3, 1), THREE_VERTICAL=(1, 3), FOUR=(2, 2)) FeatureTypes = [FeatureType.TWO_VERTICAL, FeatureType.TWO_HORIZONTAL, FeatureType.THREE_VERTICAL, FeatureType.THREE_HORIZONTAL, FeatureType.FOUR] . class HaarLikeFeature(object): &quot;&quot;&quot; Class representing a haar-like feature. &quot;&quot;&quot; def __init__(self, feature_type, position, width, height, threshold, polarity): &quot;&quot;&quot; Creates a new haar-like feature. &quot;&quot;&quot; self.type = feature_type self.top_left = position self.bottom_right = (position[0] + width, position[1] + height) self.width = width self.height = height self.threshold = threshold self.polarity = polarity self.weight = 1 # def __str__(self): # return str(self.__class__) + &quot;: &quot; + str(self.__dict__) def get_score(self, int_img): &quot;&quot;&quot; Get score for given integral image array. &quot;&quot;&quot; score = 0 if self.type == FeatureType.TWO_VERTICAL: first = sum_region(int_img, self.top_left, (self.top_left[0] + self.width, int(self.top_left[1] + self.height / 2))) second = sum_region(int_img, (self.top_left[0], int(self.top_left[1] + self.height / 2)), self.bottom_right) score = first - second elif self.type == FeatureType.TWO_HORIZONTAL: first = sum_region(int_img, self.top_left, (int(self.top_left[0] + self.width / 2), self.top_left[1] + self.height)) second = sum_region(int_img, (int(self.top_left[0] + self.width / 2), self.top_left[1]), self.bottom_right) score = first - second elif self.type == FeatureType.THREE_HORIZONTAL: first = sum_region(int_img, self.top_left, (int(self.top_left[0] + self.width / 3), self.top_left[1] + self.height)) second = sum_region(int_img, (int(self.top_left[0] + self.width / 3), self.top_left[1]), (int(self.top_left[0] + 2 * self.width / 3), self.top_left[1] + self.height)) third = sum_region(int_img, (int(self.top_left[0] + 2 * self.width / 3), self.top_left[1]), self.bottom_right) score = first - second + third elif self.type == FeatureType.THREE_VERTICAL: first = sum_region(int_img, self.top_left, (self.bottom_right[0], int(self.top_left[1] + self.height / 3))) second = sum_region(int_img, (self.top_left[0], int(self.top_left[1] + self.height / 3)), (self.bottom_right[0], int(self.top_left[1] + 2 * self.height / 3))) third = sum_region(int_img, (self.top_left[0], int(self.top_left[1] + 2 * self.height / 3)), self.bottom_right) score = first - second + third elif self.type == FeatureType.FOUR: # top left area first = sum_region(int_img, self.top_left, (int(self.top_left[0] + self.width / 2), int(self.top_left[1] + self.height / 2))) # top right area second = sum_region(int_img, (int(self.top_left[0] + self.width / 2), self.top_left[1]), (self.bottom_right[0], int(self.top_left[1] + self.height / 2))) # bottom left area third = sum_region(int_img, (self.top_left[0], int(self.top_left[1] + self.height / 2)), (int(self.top_left[0] + self.width / 2), self.bottom_right[1])) # bottom right area fourth = sum_region(int_img, (int(self.top_left[0] + self.width / 2), int(self.top_left[1] + self.height / 2)), self.bottom_right) score = first - second - third + fourth return score def get_vote(self, int_img): &quot;&quot;&quot; Get vote of this feature for given integral image. &quot;&quot;&quot; score = self.get_score(int_img) return self.weight * (1 if score &lt; self.polarity * self.threshold else -1) . def create_features(img_height, img_width, min_feature_width, max_feature_width, min_feature_height, max_feature_height): &#39;&#39;&#39; Runs multiple sized windows and creates features within the windows at each location &#39;&#39;&#39; print(&#39;Creating haar-like features..&#39;) features = [] print(FeatureTypes) for feature in FeatureTypes: # FeatureTypes are just tuples feature_start_width = max(min_feature_width, feature[0]) for feature_width in range(feature_start_width, max_feature_width, feature[0]): feature_start_height = max(min_feature_height, feature[1]) for feature_height in range(feature_start_height, max_feature_height, feature[1]): for x in range(img_width - feature_width): for y in range(img_height - feature_height): features.append(HaarLikeFeature(feature, (x, y), feature_width, feature_height, 0, 1)) features.append(HaarLikeFeature(feature, (x, y), feature_width, feature_height, 0, -1)) print(str(len(features)) + &#39; features created. n&#39;) return features def get_feature_vote(feature, image): return feature.get_vote(image) . def sum_region(integral_img_arr, top_left, bottom_right): &quot;&quot;&quot; Calculates the sum in the rectangle specified by the given tuples of features. &quot;&quot;&quot; # swap tuples top_left = (top_left[1], top_left[0]) bottom_right = (bottom_right[1], bottom_right[0]) if top_left == bottom_right: return integral_img_arr[top_left] top_right = (bottom_right[0], top_left[1]) bottom_left = (top_left[0], bottom_right[1]) return integral_img_arr[bottom_right] - integral_img_arr[top_right] - integral_img_arr[bottom_left] + integral_img_arr[top_left] . def learn(pos_ii, neg_ii, num_classifiers=-1, min_width=1, max_width=-1, min_height=1, max_height=-1): &#39;&#39;&#39; the main learn function that creates classifiers, calculates scores at various windows and locations and returns the classifiers &#39;&#39;&#39; num_pos = len(pos_ii) num_neg = len(neg_ii) num_imgs = num_pos + num_neg img_height, img_width = pos_ii[0].shape print(num_pos, num_neg, num_imgs, img_height, img_width) # set maximum feature heights and widths max_height = img_height if max_height == -1 else max_height max_width = img_width if max_width == -1 else max_width # print(max_height, max_width) # Create initial weights and labels pos_weights = np.ones(num_pos) * 1. / (2 * num_pos) neg_weights = np.ones(num_neg) * 1. / (2 * num_neg) weights = np.hstack((pos_weights, neg_weights)) labels = np.hstack((np.ones(num_pos), np.ones(num_neg) * -1)) # print(pos_weights, neg_weights, weights,labels) images = np.vstack((pos_ii, neg_ii)) print(np.shape(images)) features = create_features(img_height, img_width, min_width, max_width, min_height, max_height) num_features = len(features) feature_indexes = list(range(num_features)) num_classifiers = num_features if num_classifiers == -1 else num_classifiers print(&#39;Calculating scores for images..&#39;) votes = np.zeros((num_imgs, num_features)) # print(votes.shape) pool = Pool(processes=None) for i in range(num_imgs): votes[i] = np.array(list(pool.map(partial(get_feature_vote, image=images[i]), features))) # for j in range(num_features): # votes[i] = np.array(get_feature_vote(features[j], images[i])) classifiers = [] print(&#39;Selecting classifiers..&#39;) for t in range(num_classifiers): classification_errors = np.zeros(len(feature_indexes)) # normalize weights weights *= 1. / np.sum(weights) # select best classifier based on the weighted error for f in range(len(feature_indexes)): f_idx = feature_indexes[f] # classifier error is the sum of image weights where the classifier # is right error = sum(map(lambda img_idx: weights[img_idx] if labels[img_idx] != votes[img_idx, f_idx] else 0, range(num_imgs))) classification_errors[f] = error min_error_idx = np.argmin(classification_errors) best_error = classification_errors[min_error_idx] best_feature_idx = feature_indexes[min_error_idx] # set feature weight best_feature = features[best_feature_idx] feature_weight = 0.5 * np.log((1 - best_error) / best_error) best_feature.weight = feature_weight classifiers.append(best_feature) # update image weights weights = np.array(list(map(lambda img_idx: weights[img_idx] * np.sqrt((1-best_error)/best_error) if labels[img_idx] != votes[img_idx, best_feature_idx] else weights[img_idx] * np.sqrt(best_error/(1-best_error)), range(num_imgs)))) # remove feature (a feature can&#39;t be selected twice) feature_indexes.remove(best_feature_idx) return classifiers . classifiers = learn(faces_int_img_training, non_faces_int_img_training, num_classifiers, min_height, max_height, min_width, max_width) . 500 500 1000 50 50 (1000, 50, 50) Creating haar-like features.. [(1, 2), (2, 1), (1, 3), (3, 1), (2, 2)] ..done. 265572 features created. Calculating scores for images.. Selecting classifiers.. . . def ensemble_vote(int_img, classifiers): &quot;&quot;&quot; Classifies given integral image (numpy array) using given classifiers, &quot;&quot;&quot; return 1 if sum([c.get_vote(int_img) for c in classifiers]) &gt;= 0 else 0 def ensemble_vote_all(int_imgs, classifiers): &quot;&quot;&quot; Classifies given list of integral images (numpy arrays) using classifiers, &quot;&quot;&quot; vote_partial = partial(ensemble_vote, classifiers=classifiers) return list(map(vote_partial, int_imgs)) . print(np.shape(faces_int_img_test))Data available at : . (100, 50, 50) . print(&#39;Testing selected classifiers..&#39;) correct_faces = 0 correct_non_faces = 0 correct_faces = sum(ensemble_vote_all(faces_int_img_test, classifiers)) correct_non_faces = len(non_faces_int_img_test) - sum(ensemble_vote_all(non_faces_int_img_test, classifiers)) print(correct_faces, correct_non_faces, len(classifiers)) print(&#39;..done. n nResult: n Faces: &#39; + str(correct_faces) + &#39;/&#39; + str(len(faces_int_img_test)) + &#39; (&#39; + str((floati.e. if the sum of all classifier votes is greater 0, an image is classified positively (1) else negatively (0). The threshold is 0, because votes can be +1 or -1. :param int_imgs: List of integral images to be classified :type int_imgs: list[numpy.ndarray] :param classifiers: List of classifiers :type classifiers: list[violajones.HaarLikeFeature.HaarLikeFeature] :return: List of assigned labels, 1 if image was classified positively, else 0 :rtype: list[int](correct_faces) / len(faces_int_img_test)) * 100) + &#39;%) n non-Faces: &#39; + str(correct_non_faces) + &#39;/&#39; + str(len(non_faces_int_img_test)) + &#39; (&#39; + str((float(correct_non_faces) / len(non_faces_int_img_test)) * 100) + &#39;%)&#39;) . Testing selected classifiers.. 82 70 20 ..done. Result: Faces: 82/100 (82.0%) non-Faces: 70/100 (70.0%) .",
            "url": "https://saiamrit.github.io/technical-blog/2021/03/21/viola.html",
            "relUrl": "/2021/03/21/viola.html",
            "date": " • Mar 21, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Grab Cut from scratch (Image Segmentation using MRFs)",
            "content": "Here we will implement the GrabCut method mentioned in this paper. It is essentially an iterative version of GraphCut as shown in the figure below. . The code below takes an input image and follows these steps: . It requires a bounding box to be drawn by the user to roughly segment out the foreground pixels | It runs an initial min-cut optimization using the provided annotation | The result of this optimization gives an initial segmentation | To further refine this segmentation, the user provides two kinds of strokes to aid the optimization strokes on the background pixels | strokes on the foreground pixels | . | The algorithm now utilizes this to refine the original segmentation | . You can view this video to get a better idea of the steps involved. . Image segmentation is one exciting application of MRFs. You can further read about other applications of MRFs for Computer Vision here. . Useful Links . https://courses.engr.illinois.edu/cs543/sp2011/lectures/Lecture%2012%20-%20MRFs%20and%20Graph%20Cut%20Segmentation%20-%20Vision_Spring2011.pdf | . import sys import os import numpy as np import math import cv2 as cv import igraph as ig from sklearn.cluster import KMeans . def score_formula(mult,mat): score = np.exp(-.5 * mult) / np.sqrt(2 * np.pi)/np.sqrt(np.linalg.det(mat)) return score class GaussianMixture: def __init__(self, X, gmm_components): self.n_components = gmm_components self.n_features = X.shape[1] self.n_samples = np.zeros(self.n_components) self.coefs = np.zeros(self.n_components) self.means = np.zeros((self.n_components, self.n_features)) self.covariances = np.zeros( (self.n_components, self.n_features, self.n_features)) self.init_with_kmeans(X) def init_with_kmeans(self, X): label = KMeans(n_clusters=self.n_components, n_init=1).fit(X).labels_ self.fit(X, label) def calc_score(self, X, ci): score = np.zeros(X.shape[0]) if self.coefs[ci] &gt; 0: diff = X - self.means[ci] Tdiff = diff.T inv_cov = np.linalg.inv(self.covariances[ci]) dot = np.dot(inv_cov, Tdiff) Tdot = dot.T mult = np.einsum(&#39;ij,ij-&gt;i&#39;, diff, Tdot) score = score_formula(mult,self.covariances[ci]) return score def calc_prob(self, X): prob = [] for ci in range(self.n_components): score = np.zeros(X.shape[0]) if self.coefs[ci] &gt; 0: diff = X - self.means[ci] Tdiff = diff.T inv_cov = np.linalg.inv(self.covariances[ci]) dot = np.dot(inv_cov, Tdiff) Tdot = dot.T mult = np.einsum(&#39;ij,ij-&gt;i&#39;, diff, Tdot) score = score_formula(mult,self.covariances[ci]) prob.append(score) ans = np.dot(self.coefs, prob) return ans def which_component(self, X): prob = [] for ci in range(self.n_components): score = self.calc_score(X,ci) prob.append(score) prob = np.array(prob).T return np.argmax(prob, axis=1) def fit(self, X, labels): assert self.n_features == X.shape[1] self.n_samples[:] = 0 self.coefs[:] = 0 uni_labels, count = np.unique(labels, return_counts=True) self.n_samples[uni_labels] = count variance = 0.01 for ci in uni_labels: n = self.n_samples[ci] sum = np.sum(self.n_samples) self.coefs[ci] = n / sum self.means[ci] = np.mean(X[ci == labels], axis=0) if self.n_samples[ci] &lt;= 1: self.covariances[ci] = 0 else: self.covariances[ci] = np.cov(X[ci == labels].T) det = np.linalg.det(self.covariances[ci]) if det &lt;= 0: self.covariances[ci] += np.eye(self.n_features) * variance det = np.linalg.det(self.covariances[ci]) . def construct_gc_graph(img,mask,gc_source,gc_sink,fgd_gmm,bgd_gmm,gamma,rows,cols,left_V, up_V, neighbours, upleft_V=None,upright_V=None): bgd_indexes = np.where(mask.reshape(-1) == DRAW_BG[&#39;val&#39;]) fgd_indexes = np.where(mask.reshape(-1) == DRAW_FG[&#39;val&#39;]) pr_indexes = np.where(np.logical_or(mask.reshape(-1) == DRAW_PR_BG[&#39;val&#39;],mask.reshape(-1) == DRAW_PR_FG[&#39;val&#39;])) # print(&#39;bgd count: %d, fgd count: %d, uncertain count: %d&#39; % (len(bgd_indexes[0]), len(fgd_indexes[0]), len(pr_indexes[0]))) edges = [] gc_graph_capacity = [] edges.extend(list(zip([gc_source] * pr_indexes[0].size, pr_indexes[0]))) _D = -np.log(bgd_gmm.calc_prob(img.reshape(-1, 3)[pr_indexes])) gc_graph_capacity.extend(_D.tolist()) edges.extend(list(zip([gc_sink] * pr_indexes[0].size, pr_indexes[0]))) _D = -np.log(fgd_gmm.calc_prob(img.reshape(-1, 3)[pr_indexes])) gc_graph_capacity.extend(_D.tolist()) edges.extend(list(zip([gc_source] * bgd_indexes[0].size, bgd_indexes[0]))) gc_graph_capacity.extend([0] * bgd_indexes[0].size) edges.extend(list(zip([gc_sink] * bgd_indexes[0].size, bgd_indexes[0]))) gc_graph_capacity.extend([9 * gamma] * bgd_indexes[0].size) edges.extend(list(zip([gc_source] * fgd_indexes[0].size, fgd_indexes[0]))) gc_graph_capacity.extend([9 * gamma] * fgd_indexes[0].size) edges.extend(list(zip([gc_sink] * fgd_indexes[0].size, fgd_indexes[0]))) gc_graph_capacity.extend([0] * fgd_indexes[0].size) img_indexes = np.arange(rows*cols,dtype=np.uint32).reshape(rows,cols) temp1 = img_indexes[:, 1:] temp2 = img_indexes[:, :-1] mask1 = temp1.reshape(-1) mask2 = temp2.reshape(-1) edges.extend(list(zip(mask1, mask2))) gc_graph_capacity.extend(left_V.reshape(-1).tolist()) temp1 = img_indexes[1:, 1:] temp2 = img_indexes[:-1, :-1] mask1 = temp1.reshape(-1) mask2 = temp2.reshape(-1) edges.extend(list(zip(mask1, mask2))) gc_graph_capacity.extend(up_V.reshape(-1).tolist()) if neighbours == 8: temp1 = img_indexes[1:, :] temp2 = img_indexes[:-1, :] mask1 = temp1.reshape(-1) mask2 = temp2.reshape(-1) edges.extend(list(zip(mask1, mask2))) gc_graph_capacity.extend(upleft_V.reshape(-1).tolist()) temp1 = img_indexes[1:, :-1] temp2 = img_indexes[:-1, 1:] mask1 = temp1.reshape(-1) mask2 = temp2.reshape(-1) edges.extend(list(zip(mask1, mask2))) gc_graph_capacity.extend(upright_V.reshape(-1).tolist()) gc_graph = ig.Graph(cols * rows + 2) gc_graph.add_edges(edges) return gc_graph,gc_source,gc_sink,gc_graph_capacity def estimate_segmentation(mask,gc_graph,gc_source,gc_sink,gc_graph_capacity,rows,cols): mincut = gc_graph.st_mincut(gc_source,gc_sink, gc_graph_capacity) # print(&#39;foreground pixels: %d, background pixels: %d&#39; % (len(mincut.partition[0]), len(mincut.partition[1]))) pr_indexes = np.where(np.logical_or(mask == DRAW_PR_BG[&#39;val&#39;], mask == DRAW_PR_FG[&#39;val&#39;])) img_indexes = np.arange(rows * cols,dtype=np.uint32).reshape(rows, cols) mask[pr_indexes] = np.where(np.isin(img_indexes[pr_indexes], mincut.partition[0]),DRAW_PR_FG[&#39;val&#39;], DRAW_PR_BG[&#39;val&#39;]) bgd_indexes = np.where(np.logical_or(mask == DRAW_BG[&#39;val&#39;],mask == DRAW_PR_BG[&#39;val&#39;])) fgd_indexes = np.where(np.logical_or(mask == DRAW_FG[&#39;val&#39;],mask == DRAW_PR_FG[&#39;val&#39;])) # print(&#39;probble background count: %d, probable foreground count: %d&#39; % (bgd_indexes[0].size,fgd_indexes[0].size)) return pr_indexes,img_indexes,mask,bgd_indexes,fgd_indexes def classify_pixels(mask): bgd_indexes = np.where(np.logical_or(mask == DRAW_BG[&#39;val&#39;], mask == DRAW_PR_BG[&#39;val&#39;])) fgd_indexes = np.where(np.logical_or(mask == DRAW_FG[&#39;val&#39;], mask == DRAW_PR_FG[&#39;val&#39;])) return fgd_indexes, bgd_indexes def compute_smoothness(img, rows, cols, neighbours): left_diff = img[:, 1:] - img[:, :-1] up_diff = img[1:, :] - img[:-1, :] sq_left_diff = np.square(left_diff) sq_up_diff = np.square(up_diff) beta_sum = (np.sum(sq_left_diff) + np.sum(sq_up_diff)) avg = (2 * rows * cols) - cols - rows if neighbours == 8: upleft_diff = img[1:, 1:] - img[:-1, :-1] upright_diff = img[1:, :-1] - img[:-1, 1:] sq_upleft_diff = np.square(upleft_diff) sq_upright_diff = np.square(upright_diff) beta_sum += np.sum(sq_upleft_diff) + np.sum(sq_upright_diff) avg += (2 * rows * cols) - (2 * cols) - (2 * rows) + 2 beta = avg / (2 * beta_sum) # print(&#39;Beta:&#39;,beta) left_V = gamma * np.exp(-beta * np.sum(np.square(left_diff), axis=2)) up_V = gamma * np.exp(-beta * np.sum(np.square(up_diff), axis=2)) if neighbours == 8: upleft_V = gamma / np.sqrt(2) * np.exp(-beta * np.sum(np.square(upleft_diff), axis=2)) upright_V = gamma / np.sqrt(2) * np.exp(-beta * np.sum(np.square(upright_diff), axis=2)) return gamma, left_V, up_V, upleft_V, upright_V else: return gamma, left_V, up_V, None, None def initialize_gmm(img, bgd_indexes, fgd_indexes, gmm_components): bgd_gmm = GaussianMixture(img[bgd_indexes], gmm_components) fgd_gmm = GaussianMixture(img[fgd_indexes], gmm_components) return fgd_gmm, bgd_gmm def GrabCut(img, mask, rect, gmm_components, gamma, neighbours, n_iters): img = np.asarray(img, dtype=np.float64) rows,cols, _ = img.shape if rect is not None: mask[rect[1]:rect[1] + rect[3],rect[0]:rect[0] + rect[2]] = DRAW_PR_FG[&#39;val&#39;] fgd_indexes, bgd_indexes = classify_pixels(mask) gmm_components = gmm_components gamma = gamma beta = 0 neighbours = neighbours left_V = np.empty((rows,cols - 1)) up_V = np.empty((rows - 1,cols)) if neighbours == 8: upleft_V = np.empty((rows - 1,cols - 1)) upright_V = np.empty((rows - 1,cols - 1)) bgd_gmm = None fgd_gmm = None comp_idxs = np.empty((rows,cols), dtype=np.uint32) gc_graph = None gc_graph_capacity = None gc_source = cols*rows gc_sink = gc_source + 1 gamma, left_V, up_V, upleft_V, upright_V = compute_smoothness(img, rows, cols, neighbours) fwd_gmm, bgd_gmm = initialize_gmm(img, bgd_indexes, fgd_indexes, gmm_components) n_iters = n_iters for iters in range(n_iters): fgd_gmm, bgd_gmm = initialize_gmm(img, bgd_indexes, fgd_indexes, gmm_components) if neighbours == 8: gc_graph,gc_source,gc_sink,gc_graph_capacity = construct_gc_graph(img,mask,gc_source,gc_sink, fgd_gmm,bgd_gmm,gamma,rows, cols,left_V, up_V, neighbours, upleft_V, upright_V) else: gc_graph,gc_source,gc_sink,gc_graph_capacity = construct_gc_graph(img,mask,gc_source,gc_sink, fgd_gmm,bgd_gmm,gamma,rows, cols,left_V, up_V, neighbours, upleft_V=None, upright_V=None) pr_indexes,img_indexes,mask,bgd_indexes,fgd_indexes = estimate_segmentation(mask,gc_graph,gc_source, gc_sink,gc_graph_capacity, rows,cols) return mask . class EventHandler: &quot;&quot;&quot; Class for handling user input during segmentation iterations &quot;&quot;&quot; def __init__(self, flags, img, _mask, colors): self.FLAGS = flags self.ix = -1 self.iy = -1 self.img = img self.img2 = self.img.copy() self._mask = _mask self.COLORS = colors @property def image(self): return self.img @image.setter def image(self, img): self.img = img @property def mask(self): return self._mask @mask.setter def mask(self, _mask): self._mask = _mask @property def flags(self): return self.FLAGS @flags.setter def flags(self, flags): self.FLAGS = flags def handler(self, event, x, y, flags, param): # Draw the rectangle first if event == cv.EVENT_RBUTTONDOWN: self.FLAGS[&#39;DRAW_RECT&#39;] = True self.ix, self.iy = x,y elif event == cv.EVENT_MOUSEMOVE: if self.FLAGS[&#39;DRAW_RECT&#39;] == True: self.img = self.img2.copy() cv.rectangle(self.img, (self.ix, self.iy), (x, y), self.COLORS[&#39;BLUE&#39;], 2) cv.rectangle(self._mask, (self.ix, self.iy), (x, y), self.FLAGS[&#39;value&#39;][&#39;val&#39;], -1) self.FLAGS[&#39;RECT&#39;] = (min(self.ix, x), min(self.iy, y), abs(self.ix - x), abs(self.iy - y)) self.FLAGS[&#39;rect_or_mask&#39;] = 0 elif event == cv.EVENT_RBUTTONUP: self.FLAGS[&#39;DRAW_RECT&#39;] = False self.FLAGS[&#39;rect_over&#39;] = True cv.rectangle(self.img, (self.ix, self.iy), (x, y), self.COLORS[&#39;BLUE&#39;], 2) cv.rectangle(self._mask, (self.ix, self.iy), (x, y), self.FLAGS[&#39;value&#39;][&#39;val&#39;], -1) self.FLAGS[&#39;RECT&#39;] = (min(self.ix, x), min(self.iy, y), abs(self.ix - x), abs(self.iy - y)) self.FLAGS[&#39;rect_or_mask&#39;] = 0 # Draw strokes for refinement if event == cv.EVENT_LBUTTONDOWN: if self.FLAGS[&#39;rect_over&#39;] == False: print(&#39;Draw the rectangle first.&#39;) else: self.FLAGS[&#39;DRAW_STROKE&#39;] = True cv.circle(self.img, (x,y), 3, self.FLAGS[&#39;value&#39;][&#39;color&#39;], -1) cv.circle(self._mask, (x,y), 3, self.FLAGS[&#39;value&#39;][&#39;val&#39;], -1) elif event == cv.EVENT_MOUSEMOVE: if self.FLAGS[&#39;DRAW_STROKE&#39;] == True: cv.circle(self.img, (x, y), 3, self.FLAGS[&#39;value&#39;][&#39;color&#39;], -1) cv.circle(self._mask, (x, y), 3, self.FLAGS[&#39;value&#39;][&#39;val&#39;], -1) elif event == cv.EVENT_LBUTTONUP: if self.FLAGS[&#39;DRAW_STROKE&#39;] == True: self.FLAGS[&#39;DRAW_STROKE&#39;] = False cv.circle(self.img, (x, y), 3, self.FLAGS[&#39;value&#39;][&#39;color&#39;], -1) cv.circle(self._mask, (x, y), 3, self.FLAGS[&#39;value&#39;][&#39;val&#39;], -1) . def load_image(filename, color_space=&#39;RGB&#39;, scale=1.0): im = cv.imread(filename) if color_space == &quot;RGB&quot;: pass # im = cv.cvtColor(im, cv.COLOR_BGR2RGB) elif color_space == &quot;HSV&quot;: im = cv.cvtColor(im, cv.COLOR_BGR2HSV) elif color_space == &quot;LAB&quot;: im = cv.cvtColor(im, cv.COLOR_BGR2LAB) if not scale == 1.0: im = cv.resize(im, (int(im.shape[1]*scale), int(im.shape[0]*scale))) return im . COLORS = { &#39;BLACK&#39; : [0,0,0], &#39;RED&#39; : [0, 0, 255], &#39;GREEN&#39; : [0, 255, 0], &#39;BLUE&#39; : [255, 0, 0], &#39;WHITE&#39; : [255,255,255] } gmm_components = 15 gamma = 30 neighbours = 8 color_space = &#39;RGB&#39; n_iters = 5 DRAW_PR_BG = {&#39;color&#39; : COLORS[&#39;BLACK&#39;], &#39;val&#39; : 2} DRAW_PR_FG = {&#39;color&#39; : COLORS[&#39;WHITE&#39;], &#39;val&#39; : 3} DRAW_BG = {&#39;color&#39; : COLORS[&#39;BLACK&#39;], &#39;val&#39; : 0} DRAW_FG = {&#39;color&#39; : COLORS[&#39;WHITE&#39;], &#39;val&#39; : 1} . def run(filename, gamma=50, gmm_components=7, neighbours=8, color_space=&#39;RGB&#39;): &quot;&quot;&quot; Main loop that implements GrabCut. Input -- filename (str) : Path to image &quot;&quot;&quot; COLORS = { &#39;BLACK&#39; : [0,0,0], &#39;RED&#39; : [0, 0, 255], &#39;GREEN&#39; : [0, 255, 0], &#39;BLUE&#39; : [255, 0, 0], &#39;WHITE&#39; : [255,255,255] } # gmm_components = 4 # gamma = 30 # neighbours = 8 # color_space = &#39;RGB&#39; DRAW_PR_BG = {&#39;color&#39; : COLORS[&#39;BLACK&#39;], &#39;val&#39; : 2} DRAW_PR_FG = {&#39;color&#39; : COLORS[&#39;WHITE&#39;], &#39;val&#39; : 3} DRAW_BG = {&#39;color&#39; : COLORS[&#39;BLACK&#39;], &#39;val&#39; : 0} DRAW_FG = {&#39;color&#39; : COLORS[&#39;WHITE&#39;], &#39;val&#39; : 1} FLAGS = { &#39;RECT&#39; : (0, 0, 1, 1), &#39;DRAW_STROKE&#39;: False, # flag for drawing strokes &#39;DRAW_RECT&#39; : False, # flag for drawing rectangle &#39;rect_over&#39; : False, # flag to check if rectangle is drawn &#39;rect_or_mask&#39; : -1, # flag for selecting rectangle or stroke mode &#39;value&#39; : DRAW_PR_FG, # drawing strokes initialized to mark foreground } img = load_image(filename, color_space, scale=0.75) img2 = img.copy() mask = np.ones(img.shape[:2], dtype = np.uint8) * DRAW_PR_BG[&#39;val&#39;] # mask is a binary array with : 0 - background pixels # 1 - foreground pixels output = np.zeros(img.shape, np.uint8) # output image to be shown # Input and segmentation windows cv.namedWindow(&#39;Input Image&#39;) cv.namedWindow(&#39;Segmented image&#39;) EventObj = EventHandler(FLAGS, img, mask, COLORS) cv.setMouseCallback(&#39;Input Image&#39;, EventObj.handler) cv.moveWindow(&#39;Input Image&#39;, img.shape[1] + 10, 90) while(1): img = EventObj.image mask = EventObj.mask FLAGS = EventObj.flags cv.imshow(&#39;Segmented image&#39;, output) cv.imshow(&#39;Input Image&#39;, img) k = cv.waitKey(1) # key bindings if k == 27: # esc to exit break elif k == ord(&#39;0&#39;): # Strokes for background FLAGS[&#39;value&#39;] = DRAW_BG elif k == ord(&#39;1&#39;): # FG drawing FLAGS[&#39;value&#39;] = DRAW_FG elif k == ord(&#39;r&#39;): # reset everything FLAGS[&#39;RECT&#39;] = (0, 0, 1, 1) FLAGS[&#39;DRAW_STROKE&#39;] = False FLAGS[&#39;DRAW_RECT&#39;] = False FLAGS[&#39;rect_or_mask&#39;] = -1 FLAGS[&#39;rect_over&#39;] = False FLAGS[&#39;value&#39;] = DRAW_PR_FG img = img2.copy() mask = np.zeros(img.shape[:2], dtype = np.uint8) EventObj.image = img EventObj.mask = mask output = np.zeros(img.shape, np.uint8) elif k == 13: # Press carriage return to initiate segmentation #-# # Implement GrabCut here. # # Function should return a mask which can be used # # to segment the original image as shown on L90 # #-# rect = FLAGS[&#39;RECT&#39;] mask = GrabCut(img2,mask,rect, gmm_components, gamma, neighbours, n_iters) EventObj.flags = FLAGS mask2 = np.where((mask == 1) + (mask == 3), 255, 0).astype(&#39;uint8&#39;) output = cv.bitwise_and(img2, img2, mask=mask2) . if __name__ == &#39;__main__&#39;: filename = &#39;../images/sheep.jpg&#39; # Path to image file run(filename, gamma, gmm_components, neighbours, color_space) cv.destroyAllWindows() . Report . 1. Different Color Spaces . RGB Space . HSV Space . LAB Space . Conclusion - The results are better on the RGB color space . 2. Different size of bounding box . Tight Bounding Box . Large Bounding Box . Conclusion - The results are better with a tighter bounding box . 3. Different value of Gamma . Gamma = 10 . Gamma = 50 . Gamma = 100 . Conclusion - The results are better with a gamma around 50. With lower gamma, lot of area is segmented out and with a higher gamma, some foreground areas are missed out. . 4. 4 or 8 Connectivity . 4 Connectivity . 8 Connectivity . Conclusion - The results are better with 8 connectivity, because similarity is more appropriately computed by taking into account more nearby pixels. . 5. Number of GMM Components . 2 Components . 5 Components . 10 Components . Conclusion - The results are better with a higher no of components but with increasing no. of components, the results donot change significantly. .",
            "url": "https://saiamrit.github.io/technical-blog/2021/02/13/grab.html",
            "relUrl": "/2021/02/13/grab.html",
            "date": " • Feb 13, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Vanilla GAN",
            "content": "%load_ext autoreload %matplotlib inline . %autoreload 2 from IPython import display from utils import Logger import torch from torch import nn, optim from torch.autograd.variable import Variable from torchvision import transforms, datasets . DATA_FOLDER = &#39;./torch_data/VGAN/MNIST&#39; . def mnist_data(): compose = transforms.Compose( [transforms.ToTensor(), transforms.Normalize((.5,), (.5,)) ]) out_dir = &#39;{}/dataset&#39;.format(DATA_FOLDER) return datasets.MNIST(root=out_dir, train=True, transform=compose, download=True) . data = mnist_data() # Create loader with data, so that we can iterate over it data_loader = torch.utils.data.DataLoader(data, batch_size=100, shuffle=True) # Num batches num_batches = len(data_loader) . Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw/train-images-idx3-ubyte.gz . 100.1% . Extracting ./torch_data/VGAN/MNIST/dataset/MNIST/raw/train-images-idx3-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw/train-labels-idx1-ubyte.gz . 113.5% . Extracting ./torch_data/VGAN/MNIST/dataset/MNIST/raw/train-labels-idx1-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw/t10k-images-idx3-ubyte.gz . 100.4% . Extracting ./torch_data/VGAN/MNIST/dataset/MNIST/raw/t10k-images-idx3-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz . 180.4%/opt/conda/conda-bld/pytorch_1587428207430/work/torch/csrc/utils/tensor_numpy.cpp:141: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. . Extracting ./torch_data/VGAN/MNIST/dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./torch_data/VGAN/MNIST/dataset/MNIST/raw Processing... Done! . class Discriminator(nn.Module): def __init__(self): super(Discriminator, self).__init__() n_input = 784 n_out = 1 self.layer0 = nn.Sequential( nn.Linear(n_input, 1024), nn.ReLU(), nn.Dropout(0.4) ) self.layer1 = nn.Sequential( nn.Linear(1024, 512), nn.ReLU(), nn.Dropout(0.4) ) self.layer2 = nn.Sequential( nn.Linear(512, 256), nn.ReLU(), nn.Dropout(0.4) ) self.layer3 = nn.Sequential( torch.nn.Linear(256, n_out), torch.nn.Sigmoid() ) def forward(self, x): x = self.layer0(x) x = self.layer1(x) x = self.layer2(x) x = self.layer3(x) return x def image_to_vector(image): return image.view(image.size(0), 784) def vector_to_image(vector): return vector.view(vector.size(0), 1, 28, 28) . class Generator(nn.Module): def __init__(self): super(Generator, self).__init__() n_inputs = 100 n_out = 784 self.layer0 = nn.Sequential( nn.Linear(n_inputs, 256), nn.ReLU() ) self.layer1 = nn.Sequential( nn.Linear(256, 512), nn.ReLU() ) self.layer2 = nn.Sequential( nn.Linear(512, 1024), nn.ReLU() ) self.layer3 = nn.Sequential( nn.Linear(1024, n_out), nn.Tanh() ) def forward(self, x): x = self.layer0(x) x = self.layer1(x) x = self.layer2(x) x = self.layer3(x) return x def noise(size): n = Variable(torch.randn(size,100)) if torch.cuda.is_available(): return n.cuda() return n . discriminator = Discriminator() generator = Generator() if torch.cuda.is_available(): discriminator.cuda() generator.cuda() . print(discriminator) print(generator) . Discriminator( (layer0): Sequential( (0): Linear(in_features=784, out_features=1024, bias=True) (1): ReLU() (2): Dropout(p=0.4, inplace=False) ) (layer1): Sequential( (0): Linear(in_features=1024, out_features=512, bias=True) (1): ReLU() (2): Dropout(p=0.4, inplace=False) ) (layer2): Sequential( (0): Linear(in_features=512, out_features=256, bias=True) (1): ReLU() (2): Dropout(p=0.4, inplace=False) ) (layer3): Sequential( (0): Linear(in_features=256, out_features=1, bias=True) (1): Sigmoid() ) ) Generator( (layer0): Sequential( (0): Linear(in_features=100, out_features=256, bias=True) (1): ReLU() ) (layer1): Sequential( (0): Linear(in_features=256, out_features=512, bias=True) (1): ReLU() ) (layer2): Sequential( (0): Linear(in_features=512, out_features=1024, bias=True) (1): ReLU() ) (layer3): Sequential( (0): Linear(in_features=1024, out_features=784, bias=True) (1): Tanh() ) ) . d_optimizer = optim.Adam(discriminator.parameters(), lr = 0.0001) g_optimizer = optim.Adam(generator.parameters(), lr = 0.0001) loss = nn.BCELoss() d_steps = 1 epochs = 200 . def real_data_target(size): &#39;&#39;&#39; Tensor containing ones, with shape = size &#39;&#39;&#39; data = Variable(torch.ones(size, 1)) if torch.cuda.is_available(): return data.cuda() return data def fake_data_target(size): &#39;&#39;&#39; Tensor containing zeros, with shape = size &#39;&#39;&#39; data = Variable(torch.zeros(size, 1)) if torch.cuda.is_available(): return data.cuda() return data . def train_discriminator(optimizer, real_data, fake_data): # Reset gradients optimizer.zero_grad() # 1.1 Train on Real Data prediction_real = discriminator(real_data) # Calculate error and backpropagate error_real = loss(prediction_real, real_data_target(real_data.size(0))) error_real.backward() # 1.2 Train on Fake Data prediction_fake = discriminator(fake_data) # Calculate error and backpropagate error_fake = loss(prediction_fake, fake_data_target(real_data.size(0))) error_fake.backward() # 1.3 Update weights with gradients optimizer.step() # Return error return error_real + error_fake, prediction_real, prediction_fake def train_generator(optimizer, fake_data): # 2. Train Generator # Reset gradients optimizer.zero_grad() # Sample noise and generate fake data prediction = discriminator(fake_data) # Calculate error and backpropagate error = loss(prediction, real_data_target(prediction.size(0))) error.backward() # Update weights with gradients optimizer.step() # Return error return error . num_test_samples = 16 test_noise = noise(num_test_samples) . logger = Logger(model_name=&#39;VGAN&#39;, data_name=&#39;MNIST&#39;) for epoch in range(epochs): for n_batch, (real_batch,_) in enumerate(data_loader): # 1. Train Discriminator real_data = Variable(image_to_vector(real_batch)) if torch.cuda.is_available(): real_data = real_data.cuda() # Generate fake data fake_data = generator(noise(real_data.size(0))).detach() # Train D d_error, d_pred_real, d_pred_fake = train_discriminator(d_optimizer, real_data, fake_data) # 2. Train Generator # Generate fake data fake_data = generator(noise(real_batch.size(0))) # Train G g_error = train_generator(g_optimizer, fake_data) # Log error logger.log(d_error, g_error, epoch, n_batch, num_batches) # Display Progress if (n_batch) % 100 == 0: display.clear_output(True) # Display Images test_images = vector_to_image(generator(test_noise)).data.cpu() logger.log_images(test_images, num_test_samples, epoch, n_batch, num_batches); # Display status Logs logger.display_status( epoch, epochs, n_batch, num_batches, d_error, g_error, d_pred_real, d_pred_fake ) # Model Checkpoints logger.save_models(generator, discriminator, epoch) . Epoch: [40/200], Batch Num: [100/600] Discriminator Loss: 1.0404, Generator Loss: 1.2824 D(x): 0.6750, D(G(z)): 0.3861 .",
            "url": "https://saiamrit.github.io/technical-blog/2020/12/13/gan.html",
            "relUrl": "/2020/12/13/gan.html",
            "date": " • Dec 13, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Generating Faces Using Encoder - Decoders",
            "content": "import os import pdb import sys import time import torch import numpy as np from PIL import Image import torch.nn as nn import matplotlib.pyplot as plt import torch.nn.functional as F from torchvision import datasets from torchvision import transforms from torchvision import transforms, utils import torchvision.models as models from collections import OrderedDict from torch.utils.data import Dataset,DataLoader if torch.cuda.is_available(): torch.backends.cudnn.deterministic = True . d = torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;) print(&quot;Device is : &quot;,d) . Device is : cuda:0 . random_seeds = 1 learning_rate = 0.001 num_epochs = 20 train_batch_size = 2 test_batch_size = 1 . class Facedata(Dataset): def __init__(self, root_dir, transform=None): self.root_dir = root_dir self.image_list = [f for f in os.listdir(root_dir) if (f.endswith(&#39;.png&#39;) or f.endswith(&#39;.jpg&#39;))] self.transform = transform def __len__(self): return len(self.image_list) def __getitem__(self, idx): img_name = os.path.join(self.root_dir, self.image_list[idx]) image = Image.open(img_name) image = image.convert(&#39;RGB&#39;) if self.transform: image = self.transform(image) return image . train_data_dir = &#39;./StyleGAN/generated_images/data/train&#39; test_data_dir = &#39;./StyleGAN/generated_images/data/test&#39; face_data_train = Facedata(train_data_dir, transform = transforms.ToTensor()) face_data_test = Facedata(test_data_dir, transform = transforms.ToTensor()) train_dataloader = torch.utils.data.DataLoader(face_data_train, batch_size = train_batch_size, shuffle = True) test_dataloader = torch.utils.data.DataLoader(face_data_test, batch_size = test_batch_size, shuffle = False) . print(len(train_dataloader)) print(len(test_dataloader)) . 100 10 . SegNet Encoder . class SegNet(nn.Module): def __init__(self): super(SegNet, self).__init__() self.conv1_1 = nn.Conv2d(1, 64, kernel_size = 3, stride = 1, padding = 1) self.conv1_2 = nn.Conv2d(64, 64, kernel_size = 3, stride = 1, padding = 1) self.conv2_1 = nn.Conv2d(64, 128, kernel_size = 3, stride = 1, padding = 1) self.conv2_2 = nn.Conv2d(128, 128, kernel_size = 3, stride = 1, padding = 1) self.conv3_1 = nn.Conv2d(128, 256, kernel_size = 3, stride = 1, padding = 1) self.conv3_2 = nn.Conv2d(256, 256, kernel_size = 3, stride = 1, padding = 1) self.conv3_3 = nn.Conv2d(256, 256, kernel_size = 3, stride = 1, padding = 1) self.conv4_1 = nn.Conv2d(256, 512, kernel_size = 3, stride = 1, padding = 1) self.conv4_2 = nn.Conv2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.conv4_3 = nn.Conv2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.conv5_1 = nn.Conv2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.conv5_2 = nn.Conv2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.conv5_3 = nn.Conv2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.pool1 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0, return_indices = True) self.pool2 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0, return_indices = True) self.pool3 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0, return_indices = True) self.pool4 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0, return_indices = True) self.pool5 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0, return_indices = True) self.unpool5 = nn.MaxUnpool2d(kernel_size = 2, stride = 2, padding = 0) self.unpool4 = nn.MaxUnpool2d(kernel_size = 2, stride = 2, padding = 0) self.unpool3 = nn.MaxUnpool2d(kernel_size = 2, stride = 2, padding = 0) self.unpool2 = nn.MaxUnpool2d(kernel_size = 2, stride = 2, padding = 0) self.unpool1 = nn.MaxUnpool2d(kernel_size = 2, stride = 2, padding = 0) self.deconv5_1 = nn.ConvTranspose2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.deconv5_2 = nn.ConvTranspose2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.deconv5_3 = nn.ConvTranspose2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.deconv4_1 = nn.ConvTranspose2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.deconv4_2 = nn.ConvTranspose2d(512, 512, kernel_size = 3, stride = 1, padding = 1) self.deconv4_3 = nn.ConvTranspose2d(512, 256, kernel_size = 3, stride = 1, padding = 1) self.deconv3_1 = nn.ConvTranspose2d(256, 256, kernel_size = 3, stride = 1, padding = 1) self.deconv3_2 = nn.ConvTranspose2d(256, 256, kernel_size = 3, stride = 1, padding = 1) self.deconv3_3 = nn.ConvTranspose2d(256, 128, kernel_size = 3, stride = 1, padding = 1) self.deconv2_1 = nn.ConvTranspose2d(128, 128, kernel_size = 3, stride = 1, padding = 1) self.deconv2_2 = nn.ConvTranspose2d(128, 64, kernel_size = 3, stride = 1, padding = 1) self.deconv1_1 = nn.ConvTranspose2d(64, 64, kernel_size = 3, stride = 1, padding = 1) self.deconv1_2 = nn.ConvTranspose2d(64, 2, kernel_size = 3, stride = 1, padding = 1) self.batch_norm1 = nn.BatchNorm2d(64) self.batch_norm2 = nn.BatchNorm2d(128) self.batch_norm3 = nn.BatchNorm2d(256) self.batch_norm4 = nn.BatchNorm2d(512) def forward(self, x): size_1 = x.size() x = self.conv1_1(x) x = self.batch_norm1(x) x = F.relu(x) x = self.conv1_2(x) x = self.batch_norm1(x) x = F.relu(x) x, idxs1 = self.pool1(x) size_2 = x.size() x = self.conv2_1(x) x = self.batch_norm2(x) x = F.relu(x) x = self.conv2_2(x) x = self.batch_norm2(x) x = F.relu(x) x, idxs2 = self.pool2(x) size_3 = x.size() x = self.conv3_1(x) x = self.batch_norm3(x) x = F.relu(x) x = self.conv3_2(x) x = self.batch_norm3(x) x = F.relu(x) x = self.conv3_3(x) x = self.batch_norm3(x) x = F.relu(x) x, idxs3 = self.pool3(x) size_4 = x.size() x = self.conv4_1(x) x = self.batch_norm4(x) x = F.relu(x) x = self.conv4_2(x) x = self.batch_norm4(x) x = F.relu(x) x = self.conv4_3(x) x = self.batch_norm4(x) x = F.relu(x) x, idxs4 = self.pool4(x) size_5 = x.size() x = self.conv5_1(x) x = self.batch_norm4(x) x = F.relu(x) x = self.conv5_2(x) x = self.batch_norm4(x) x = F.relu(x) x = self.conv5_3(x) x = self.batch_norm4(x) x = F.relu(x) x, idxs5 = self.pool5(x) x = self.unpool5(x, idxs5, output_size = size_5) x = self.deconv5_1(x) x = self.batch_norm4(x) x = F.relu(x) x = self.deconv5_2(x) x = self.batch_norm4(x) x = F.relu(x) x = self.deconv5_3(x) x = self.batch_norm4(x) x = F.relu(x) x = self.unpool4(x, idxs4, output_size = size_4) x = self.deconv4_1(x) x = self.batch_norm4(x) x = F.relu(x) x = self.deconv4_2(x) x = self.batch_norm4(x) x = F.relu(x) x = self.deconv4_3(x) x = self.batch_norm3(x) x = F.relu(x) x = self.unpool3(x, idxs3, output_size = size_3) x = self.deconv3_1(x) x = self.batch_norm3(x) x = F.relu(x) x = self.deconv3_2(x) x = self.batch_norm3(x) x = F.relu(x) x = self.deconv3_3(x) x = self.batch_norm2(x) x = F.relu(x) x = self.unpool2(x, idxs2, output_size = size_2) x = self.deconv2_1(x) x = self.batch_norm2(x) x = F.relu(x) x = self.deconv2_2(x) x = self.batch_norm1(x) x = F.relu(x) x = self.unpool1(x, idxs1, output_size = size_1) x = self.deconv1_1(x) x = self.batch_norm1(x) x = F.relu(x) x = self.deconv1_2(x) return x . VGG Encoder Decoder . Encoder . class Encoder(torch.nn.Module): def __init__(self): super(Encoder , self).__init__() # Encoder layers self.encoder = nn.Sequential( # conv1 nn.Conv2d(3, 64, 3, padding = 1), nn.ReLU(), nn.Conv2d(64, 64, 3, padding = 1), nn.ReLU(), nn.MaxPool2d(2, stride = 2, return_indices = True), # conv2 nn.Conv2d(64, 128, 3, padding = 1), nn.ReLU(), nn.Conv2d(128, 128, 3, padding = 1), nn.ReLU(), nn.MaxPool2d(2, stride = 2, return_indices = True), # conv3 nn.Conv2d(128, 256, 3, padding = 1), nn.ReLU(), nn.Conv2d(256, 256, 3, padding = 1), nn.ReLU(), nn.Conv2d(256, 256, 3, padding = 1), nn.ReLU(), nn.MaxPool2d(2, stride = 2, return_indices = True), # conv4 nn.Conv2d(256, 512, 3, padding = 1), nn.ReLU(), nn.Conv2d(512, 512, 3, padding = 1), nn.ReLU(), nn.Conv2d(512, 512, 3, padding = 1), nn.ReLU(), nn.MaxPool2d(2, stride = 2, return_indices = True), # conv5 nn.Conv2d(512, 512, 3, padding = 1), nn.ReLU(), nn.Conv2d(512, 512, 3, padding = 1), nn.ReLU(), nn.Conv2d(512, 512, 3, padding = 1), nn.ReLU(), nn.MaxPool2d(2, stride = 2, return_indices = True) ) self.encoder_feature_outputs = OrderedDict() # store all (conv) feature maps self.encoder_pool_indices = OrderedDict() # store all max locations for pooling layers # index of convolutional layers self.conv_layer_indices = [0, 2, 5, 7, 10, 12, 14, 17, 19, 21, 24, 26, 28] #self.init_weights() # initialize weights # initialize weights using pre-trained vgg16 on ImageNet def init_weights(self): vgg16_pretrained = models.vgg16(pretrained = True) for idx, layer in enumerate(vgg16_pretrained.features): # feature component if isinstance(layer, nn.Conv2d): self.encoder[idx].weight.data = layer.weight.data self.encoder[idx].bias.data = layer.bias.data def forward_features(self, x): output = x for idx, layer in enumerate(self.encoder): if isinstance(layer, torch.nn.MaxPool2d): output, indices = layer(output) # print(layer,output.shape) self.encoder_feature_outputs[idx] = output self.encoder_pool_indices[idx] = indices else: output = layer(output) # print(layer,output.shape) self.encoder_feature_outputs[idx] = output return idx, output def forward(self, x): # print(&#39;Encoder activations: &#39;) idx, output = self.forward_features(x) # print(&#39;Value of idx in encoder is:&#39;,idx) latents = output return idx, int(latents), self.encoder_feature_outputs, self.encoder_pool_indices . Decoder . class Decoder(nn.Module): def __init__(self): super(Decoder, self).__init__() self.decoder = nn.Sequential( # deconv1 nn.MaxUnpool2d(2, stride = 2), nn.ReLU(), nn.ConvTranspose2d(512, 512, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(512, 512, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(512, 512, 3, padding = 1), # deconv2 nn.MaxUnpool2d(2, stride = 2), nn.ReLU(), nn.ConvTranspose2d(512, 512, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(512, 512, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(512, 256, 3, padding = 1), # deconv3 nn.MaxUnpool2d(2, stride = 2), nn.ReLU(), nn.ConvTranspose2d(256, 256, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(256, 256, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(256, 128, 3, padding = 1), # deconv4 nn.MaxUnpool2d(2, stride = 2), nn.ReLU(), nn.ConvTranspose2d(128, 128, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(128, 64, 3, padding = 1), # deconv5 nn.MaxUnpool2d(2, stride = 2), nn.ReLU(), nn.ConvTranspose2d(64, 64, 3, padding = 1), nn.ReLU(), nn.ConvTranspose2d(64, 3, 3, padding = 1) ) # forward idx : backward idx self.conv2deconv_indices = {0:30, 2:28, 5:25, 7:23, 10:20, 12:18, 14:16, 17:13, 19:11, 21:9, 24:6, 26:4, 28:2} # forward idx : backward idx; not align self.conv2deconv_bias_indices = {0:28, 2:25, 5:23, 7:20, 10:18, 12:16, 14:13, 17:11, 19:9, 21:6, 24:4, 26:2} # forwardidx : backward idx self.relu2relu_indices = {1:29, 3:27, 6:24, 8:22, 11:19, 13:17, 15:15, 18:12, 20:10, 22:8, 25:5, 27:3, 29:1} # backward idx : forward idx self.unpool2pool_index = {26:4, 21:9, 14:16, 7:23, 0:30} self.unpool2pool_indices = {30:0, 23:7, 16:14, 9:21, 4:26} self.decoder_feature_outputs = OrderedDict() # store all (conv) feature maps #self.init_weights() # initialize weights # initialize weights using pre-trained vgg16 on ImageNet def init_weights(self): vgg16_pretrained = models.vgg16(pretrained = True) for idx, layer in enumerate(vgg16_pretrained.features): # feature component if isinstance(layer, nn.Conv2d): self.decoder[self.conv2deconv_indices[idx]].weight.data = layer.weight.data if idx in self.conv2deconv_bias_indices: # bias in first backward layer is randomly set self.decoder[self.conv2deconv_bias_indices[idx]].bias.data = layer.bias.data def forward(self, x, layer, activation_idx, pool_locs): # print(&#39;Layer in decoder is: &#39;,layer) # print(&#39;decoder activations&#39;) if layer in self.conv2deconv_indices: start_idx = self.conv2deconv_indices[layer] elif layer in self.relu2relu_indices: start_idx = self.relu2relu_indices[layer] elif layer in self.unpool2pool_indices: # print(&#39;true unpool2pool&#39;) # print(&#39;No such Conv2d or RelU layer!&#39;) start_idx = self.unpool2pool_indices[layer] # exit() # sys.exit(0) # print(&#39;start idx is :&#39;,start_idx) # print(&#39;len is: &#39;,len(self.decoder)) for idx in range(start_idx, len(self.decoder)): # print(idx) # print(self.unpool2pool_index[idx]) if isinstance(self.decoder[idx], nn.MaxUnpool2d): # print(&#39;Pool location is: &#39;,pool_locs[self.unpool2pool_index[idx]].shape) x = self.decoder[idx](x, pool_locs[self.unpool2pool_index[idx]]) # print(self.decoder[idx],x.shape) self.decoder_feature_outputs[idx] = x else: x = self.decoder[idx](x) # print(self.decoder[idx],x.shape) self.decoder_feature_outputs[idx] = x reconstructed = x return reconstructed, self.decoder_feature_outputs . encoder = Encoder() decoder = Decoder() encoder = encoder.to(d) decoder = decoder.to(d) print(&quot;&quot;*35) print(&#39; ENCODER &#39;) print(&quot;&quot;*35) print(encoder) print(&quot;&quot;*35) print(&#39; DECODER &#39;) print(&quot;&quot;*35) print(decoder) . ENCODER Encoder( (encoder): Sequential( (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (1): ReLU() (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (3): ReLU() (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (6): ReLU() (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (8): ReLU() (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (11): ReLU() (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (13): ReLU() (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (15): ReLU() (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (18): ReLU() (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (20): ReLU() (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (22): ReLU() (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (25): ReLU() (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (27): ReLU() (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (29): ReLU() (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) ) ) DECODER Decoder( (decoder): Sequential( (0): MaxUnpool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0)) (1): ReLU() (2): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (3): ReLU() (4): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (5): ReLU() (6): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (7): MaxUnpool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0)) (8): ReLU() (9): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (10): ReLU() (11): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (12): ReLU() (13): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (14): MaxUnpool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0)) (15): ReLU() (16): ConvTranspose2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (17): ReLU() (18): ConvTranspose2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (19): ReLU() (20): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (21): MaxUnpool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0)) (22): ReLU() (23): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (24): ReLU() (25): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (26): MaxUnpool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0)) (27): ReLU() (28): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (29): ReLU() (30): ConvTranspose2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ) ) . optimizer = torch.optim.Adam(list(encoder.parameters()) + list(decoder.parameters()),weight_decay=1e-5) print(np.shape(list(encoder.parameters()) + list(decoder.parameters()))) . (52,) . criterion = nn.MSELoss() . print(&quot;&quot;*35) print(&#39; ENCODER PARAMETERS &#39;) print(&quot;&quot;*35) for i in range(len(list(encoder.parameters()))): print(list(encoder.parameters())[i].shape) print() print(&quot;&quot;*35) print(&#39; DECODER PARAMETERS &#39;) print(&quot;&quot;*35) for i in range(len(list(decoder.parameters()))): print(list(decoder.parameters())[i].shape) . ENCODER PARAMETERS torch.Size([64, 3, 3, 3]) torch.Size([64]) torch.Size([64, 64, 3, 3]) torch.Size([64]) torch.Size([128, 64, 3, 3]) torch.Size([128]) torch.Size([128, 128, 3, 3]) torch.Size([128]) torch.Size([256, 128, 3, 3]) torch.Size([256]) torch.Size([256, 256, 3, 3]) torch.Size([256]) torch.Size([256, 256, 3, 3]) torch.Size([256]) torch.Size([512, 256, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) DECODER PARAMETERS torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 512, 3, 3]) torch.Size([512]) torch.Size([512, 256, 3, 3]) torch.Size([256]) torch.Size([256, 256, 3, 3]) torch.Size([256]) torch.Size([256, 256, 3, 3]) torch.Size([256]) torch.Size([256, 128, 3, 3]) torch.Size([128]) torch.Size([128, 128, 3, 3]) torch.Size([128]) torch.Size([128, 64, 3, 3]) torch.Size([64]) torch.Size([64, 64, 3, 3]) torch.Size([64]) torch.Size([64, 3, 3, 3]) torch.Size([3]) . print(optimizer) . Adam ( Parameter Group 0 amsgrad: False betas: (0.9, 0.999) eps: 1e-08 lr: 0.001 weight_decay: 1e-05 ) . print(criterion) . MSELoss() . start_time = time.time() train_loss = [] for epoch in range(num_epochs): for batch_idx, original_images in enumerate(train_dataloader): # print(original_images.shape) original_images = original_images.to(d) optimizer.zero_grad() # clear accumulated gradients # FORWARD AND BACK PROP final_layer_index,encoded_latents,encoder_feature_maps,encoder_pooling_indices = encoder(original_images) # print(&quot;Encoded latents shape :&quot;, encoded_latents.shape) reconstructed_images, decoder_feature_maps = decoder(encoded_latents, final_layer_index,encoder_feature_maps, encoder_pooling_indices) loss = criterion(reconstructed_images, original_images) train_loss.append(loss) loss.backward() ### UPDATE MODEL PARAMETERS optimizer.step() ### LOGGING if not batch_idx % 50: print (&#39;Epoch: %03d/%03d | Batch %03d/%03d | Cost: %.4f&#39; %(epoch+1, num_epochs, batch_idx, len(train_dataloader)//train_batch_size, loss)) torch.save(encoder.state_dict(), &#39;./conv_encoder_{}.pth&#39;.format(epoch)) torch.save(decoder.state_dict(), &#39;./conv_decoder_{}.pth&#39;.format(epoch)) print(&#39;Time elapsed: %.2f min&#39; % ((time.time() - start_time)/60)) print(&#39;Total Training Time: %.2f min&#39; % ((time.time() - start_time)/60)) . plt.plot(train_loss) . [&lt;matplotlib.lines.Line2D at 0x7fb8a0296160&gt;] . start_time = time.time() for batch_indx, original_test_images in enumerate(test_dataloader): #print(original_test_images.shape) orig = original_test_images.cpu().detach().numpy().squeeze() original_test_images = original_test_images.to(d) # FORWARD PASS t_final_layer_index,t_encoded_latents,t_encoder_feature_maps, t_encoder_pooling_indices = encoder(original_test_images) # print(&quot;Encoded latents shape :&quot;, encoded_latents.shape) t_reconstructed_images, t_decoder_feature_maps = decoder(t_encoded_latents, t_final_layer_index, t_encoder_feature_maps, t_encoder_pooling_indices) # print(t_reconstructed_images.shape) t_reconstructed = t_reconstructed_images.cpu().detach().numpy().squeeze() # print(t_reconstructed.shape) t_reconstructed = np.moveaxis(t_reconstructed,0,-1) orig = np.moveaxis(orig,0,-1) #print(reconstructed) print(&quot; ORIGINAL IMAGE&quot;) #plt.imshow(orig.astype(&#39;uint8&#39;)) plt.imshow(orig) plt.show() print(&quot; RECONSTRUCTED IMAGE&quot;) #plt.imshow(t_reconstructed.astype(&#39;uint8&#39;)) plt.imshow(t_reconstructed) # plt.savefig(&#39;rec_{}.) plt.show() . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE . ORIGINAL IMAGE . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . RECONSTRUCTED IMAGE .",
            "url": "https://saiamrit.github.io/technical-blog/2020/11/12/enc-dec.html",
            "relUrl": "/2020/11/12/enc-dec.html",
            "date": " • Nov 12, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Image Mosacing and Stereo Correspondences",
            "content": "Image Mosacing . Steps: . Detect and describe keypoints in the images using ORB feature extractors | Matching the extracted keypoints using KNN matcher. MAtching is done using euclidean distance. | The matching key points are extracted and ratio testing is performed to save relevant points. | Homography is calculated using the points | Stiching is done conditioned on the computed homography. | import cv2 import copy import imutils import numpy as np import matplotlib.pyplot as plt inputs = &#39;../images/Image Mosaicing/&#39; . feature_extractor = &#39;orb&#39; feature_matching = &#39;bf&#39; . def plot_image(img, title=&quot;Image&quot;): img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) fig = plt.figure(figsize = (8,8)) plt.imshow(img) plt.title(title) plt.xticks([]), plt.yticks([]) plt.show() . img1 = cv2.imread(inputs + &#39;1_1.jpg&#39;) plot_image(img1, &quot;Image 1&quot;) img1_gray = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY) img2 = cv2.imread(inputs + &#39;1_2.jpg&#39;) plot_image(img2, &quot;Image 2&quot;) img2_gray = cv2.cvtColor(img2, cv2.COLOR_RGB2GRAY) . def detectAndDescribe(image, method=None): &quot;&quot;&quot; Compute key points and feature descriptors using an ORB feature descriptor. &quot;&quot;&quot; # Initialize the ORB descriptor descriptor = cv2.ORB_create(nfeatures=5000) # get keypoints and descriptors (kps, features) = descriptor.detectAndCompute(image, None) return (kps, features) . kpsA, featuresA = detectAndDescribe(img2_gray, method=feature_extractor) kpsB, featuresB = detectAndDescribe(img1_gray, method=feature_extractor) . fig, (ax1,ax2) = plt.subplots(nrows=1, ncols=2, figsize=(15,8), constrained_layout=False) ax1.imshow(cv2.drawKeypoints(img1_gray,kpsA,None,color=(255,0,0),flags=0)) ax1.set_xlabel(&quot;(a)&quot;, fontsize=14) ax2.imshow(cv2.drawKeypoints(img2_gray,kpsB,None,color=(255,0,0),flags=0)) ax2.set_xlabel(&quot;(b)&quot;, fontsize=14) plt.show() . def matchKeyPointsKNN(featuresA, featuresB, ratio): &#39;&#39;&#39; finds matching keypoints using a KNN based Brute Force Matcher &#39;&#39;&#39; # Create and return a Matcher Object bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=False) # compute the raw matches and initialize the list of actual matches rawMatches = bf.knnMatch(featuresA, featuresB, 2) matches = [] # loop over the raw matches for m,n in rawMatches: # ensure the distance is within a certain ratio of each # other (i.e. Lowe&#39;s ratio test) if m.distance &lt; n.distance * ratio: matches.append(m) return matches . matches = matchKeyPointsKNN(featuresA, featuresB, ratio=0.7) . matched_img = cv2.drawMatches(img1.copy(), kpsA, img2.copy(), kpsB, matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS) img = cv2.cvtColor(matched_img, cv2.COLOR_BGR2RGB) plt.figure(figsize = (20,20)) plt.xticks([]), plt.yticks([]) plt.imshow(img) plt.show() . def getHomography(kpsA, kpsB, featuresA, featuresB, matches, reprojThresh): &#39;&#39;&#39; Computes and returns the homography between 2 images based on their keypoints and returns homography matrix &#39;&#39;&#39; # convert the keypoints to numpy arrays kpsA = np.float32([kp.pt for kp in kpsA]) kpsB = np.float32([kp.pt for kp in kpsB]) if len(matches) &gt; 4: # construct the two sets of points ptsA = np.float32([kpsA[m.queryIdx] for m in matches]) ptsB = np.float32([kpsB[m.trainIdx] for m in matches]) # estimate the homography between the sets of points (H, status) = cv2.findHomography(ptsA, ptsB, cv2.RANSAC,reprojThresh) return (matches, H, status) else: return None . M = getHomography(kpsA, kpsB, featuresA, featuresB, matches, reprojThresh=5) (matches, H, status) = M print(H) . [[ 5.85634232e-01 -1.26330591e-02 1.51037052e+03] [-1.04747165e-01 8.40686919e-01 2.15347907e+02] [-8.90242256e-05 -7.86000050e-06 1.00000000e+00]] . def computeHomography(img1,img2): &#39;&#39;&#39; Takes as input the images and computes and returns the homography matrix between the images &#39;&#39;&#39; # Convert input image to grayscale img1_gray = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY) img2_gray = cv2.cvtColor(img2, cv2.COLOR_RGB2GRAY) # Computes the keypoints and feture descriptors kpsA, featuresA = detectAndDescribe(img2_gray, method=feature_extractor) kpsB, featuresB = detectAndDescribe(img1_gray, method=feature_extractor) # Computes the matching points based on Brute Force matcher matches = matchKeyPointsKNN(featuresA, featuresB, ratio=0.7) # Compute the homography matrix M = getHomography(kpsA, kpsB, featuresA, featuresB, matches, reprojThresh=5) (matches, H, status) = M return H . def stitchImages(img1, img2, H, shape): &#39;&#39;&#39; Stiches both the images conditiones on the obtained homography &#39;&#39;&#39; # warpPerspective() transforms the image according to the computed homography result = cv2.warpPerspective(img2, H, shape) # Images put together to make the final stiched image result[0:img1.shape[0], 0:img1.shape[1]] = img1 return result . def plotCorrection(image): &#39;&#39;&#39; Correctes the stiched immages to remove the black pixels from the stiched image &#39;&#39;&#39; #Convert to grayscale and threshold the image gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY)[1] # Finds contours from the binary image cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) cnts = imutils.grab_contours(cnts) # get the maximum contour area c = max(cnts, key=cv2.contourArea) # get a bbox from the contour area (x, y, w, h) = cv2.boundingRect(c) # crop the image to the bbox coordinates img = image[y:y + h, x:x + w] # show the cropped image plt.figure(figsize=(20,15)) plt.axis(&#39;off&#39;) plt.imshow(img) plt.show() return img . H = computeHomography(img1,img2) shape = (img1.shape[1] + img2.shape[1],2*img1.shape[0]) image = stitchImages(img1, img2, H, shape) res = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) i = plotCorrection(res) . img1 = cv2.imread(inputs + &#39;4_1.jpg&#39;) img2 = cv2.imread(inputs + &#39;4_2.jpg&#39;) H = computeHomography(img1,img2) shape = (img1.shape[1] + img2.shape[1],2*img1.shape[0]) image = stitchImages(img1, img2, H, shape) res = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) i = plotCorrection(res) . These 2 images donot get stiched properly because the matching points are not proper and most of them are of either same intensity or are very similar t eachother so multiple points in both images are matched. Hence the results on this are bad. . img1 = cv2.imread(inputs + &quot;1_1.jpg&quot;) img2 = cv2.imread(inputs + &quot;1_2.jpg&quot;) img3 = cv2.imread(inputs + &quot;1_3.jpg&quot;) img4 = cv2.imread(inputs + &quot;1_4.jpg&quot;) h,w,c = img1.shape H12 = computeHomography(img1, img2) H23 = computeHomography(img2, img3) H34 = computeHomography(img3, img4) H13 = H12 @ H23 H14 = H13 @ H34 res1 = stitchImages(img1, img2, H12, (img2.shape[1],2*h)) res2 = stitchImages(res1, img3, H13, (res1.shape[1] + img3.shape[1],3*h)) res3 = stitchImages(res2, img4, H14, (res2.shape[1] + img4.shape[1],4*h)) . res = cv2.cvtColor(res3, cv2.COLOR_BGR2RGB) i = plotCorrection(res) . img1 = cv2.imread(inputs + &#39;3_1.png&#39;) img2 = cv2.imread(inputs + &#39;3_2.png&#39;) H = computeHomography(img1,img2) shape = (img1.shape[1] + img2.shape[1],2*img1.shape[0]) image = stitchImages(img1, img2, H, shape) res = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) i = plotCorrection(res) . img1 = cv2.imread(inputs + &quot;2_1.png&quot;) img2 = cv2.imread(inputs + &quot;2_2.png&quot;) img3 = cv2.imread(inputs + &quot;2_3.png&quot;) h,w,c = img1.shape H12 = computeHomography(img1, img2) H23 = computeHomography(img2, img3) H13 = H12 @ H23 res1 = stitchImages(img1, img2, H12, (img2.shape[1],2*h)) res2 = stitchImages(res1, img3, H13, (res1.shape[1] + img3.shape[1],2*h)) . res = cv2.cvtColor(res2, cv2.COLOR_BGR2RGB) im1 = plotCorrection(res) . img4 = cv2.imread(inputs + &quot;2_4.png&quot;) img5 = cv2.imread(inputs + &quot;2_5.png&quot;) img6 = cv2.imread(inputs + &quot;2_6.png&quot;) h,w,c = img4.shape H45 = computeHomography(img4, img5) H56 = computeHomography(img5, img6) H46 = H45 @ H56 res3 = stitchImages(img4, img5, H45, (img5.shape[1],2*h)) res4 = stitchImages(res3, img6, H46, (res1.shape[1] + img6.shape[1],2*h)) . res = cv2.cvtColor(res4, cv2.COLOR_BGR2RGB) im2 = plotCorrection(res) . H = computeHomography(im1,im2) shape = (2*im1.shape[1] ,2*im1.shape[0]) image = stitchImages(im1, im2, H, shape) i = plotCorrection(image) . Stereo Correspondance . 1. Intensity based correlation . In this method, we try to find the correspondance between the pair of stereo images using intensity window-based correlation method. Here, the matching process is applied directly to the intensity profiles of the two images. The correlation is computed between the windows in the two images and the correspondance is obtained. The correlation function is given by: . $ begin{equation} correlation = frac{w_2^Tw_1}{ sqrt{w_1^Tw_1} sqrt{w_2^Tw_2}} tag{1} end{equation} $ . def intensityCorrelation(p1, p2): &#39;&#39;&#39; Computes the correlation value from the 2 given flattened vector patches &#39;&#39;&#39; #If any of the norm of any vector is 0, return -1 if np.sqrt(p1.T@p1) == 0: return -1 if np.sqrt(p2.T@p2) == 0: return -1 # Compute the correlation value correlation = p1.T@p2/((np.sqrt(p1.T@p1))*(np.sqrt(p2.T@p2))) return correlation . def getCorrespondance(img, patch): &#39;&#39;&#39; Returns the corresponding image point to the patch centre in 2nd image &#39;&#39;&#39; k = patch.shape[0] best = 0 patch = patch.flatten() point = -1 # Looping over all the points in the 2nd image for i in range(int(k/2), img.shape[0]-int(k/2)): res = 0 for j in range(int(k/2), img.shape[1]-int(k/2)): p1 = img[i - int(k/2): i + int(k/2) + 1, j - int(k/2): j + int(k/2) + 1].flatten() p1 = p1 - np.mean(p1) p2 = patch - np.mean(patch) # Passing each extracted patch and the input patch to find correspondance res = max(res,intensityCorrelation(p1, p2)) if best &lt; res: best = res point = [i,j] return point . def draw_matches(img1, img2, src, dst): &#39;&#39;&#39; Draw the matching points in both the images connected by lines &#39;&#39;&#39; r,c,_ = img1.shape img3 = np.zeros((r,2*c,3)) img3[:,:c,:] = img1 img3[:,c:,:] = img2 for s,d in zip(src, dst): color = tuple(np.random.randint(0,255,3).tolist()) print(s,d) p = (s[0], s[1]) q = (d[0]+c, d[1]) lined = cv2.line(img3,p,q,color,1) lined = cv2.circle(lined,p,3,color,-1) lined = cv2.circle(lined,q,3,color,-1) plt.figure(figsize=(18,18)) plt.imshow(lined.astype(np.uint8)) plt.axis(&#39;off&#39;) plt.show() . img1 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_1.jpg&#39;),cv2.COLOR_BGR2RGB) img2 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_2.jpg&#39;),cv2.COLOR_BGR2RGB) src_pts = np.array([[120,64], [146,52], [79,113], [22,72], [160,175], [204,121], [10,20], [15,180], [50,30], [220,10], [200,80], [250,150], [100,100], [150,190]]) dest_pts = [] neb = 7 for src in src_pts: dest_pts.append(getCorrespondance(img2, img1[src[0]-int(neb/2):src[0]+int(neb/2)+1, src[1]-int(neb/2):src[1]+int(neb/2)+1])) dst_pts = np.asarray(dest_pts) draw_matches(img1, img2, src_pts, dst_pts) . [120 64] [121 75] [146 52] [ 86 199] [ 79 113] [138 234] [22 72] [23 86] [160 175] [160 191] [204 121] [204 129] [10 20] [10 38] [ 15 180] [ 15 203] [50 30] [50 45] [220 10] [148 268] [200 80] [200 89] [250 150] [137 241] [100 100] [121 82] [150 190] [151 208] . 2. Stereo Rectification . Steps: . Calculate stereo correspondences between the two images(using ORB feature matching, defined in question 1). | Calculate the fundamental matrix for the given pair of images from the matches found. | Project the two images to the same plane after calculating the homography for both the images(rectified). | def stereoRectifyImages(img1, img2): &#39;&#39;&#39; Computes the Homographies from the matching points in both images extracted using SIFT extractors and performs rectification of both the images &#39;&#39;&#39; pts1 = [] pts2 = [] # Convert to gray scale images img1_gray = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY) img2_gray = cv2.cvtColor(img2, cv2.COLOR_RGB2GRAY) # Extract the keypoints and feature descriptors kpsA, featuresA = detectAndDescribe(img1_gray, method=feature_extractor) kpsB, featuresB = detectAndDescribe(img2_gray, method=feature_extractor) # Find the matching points matches = matchKeyPointsKNN(featuresA, featuresB, ratio=0.5) # Filter the matching points for mat in matches: pts1.append(kpsA[mat.queryIdx].pt) pts2.append(kpsB[mat.trainIdx].pt) pts1 = np.asarray(pts1, dtype = np.float32) pts2 = np.asarray(pts2, dtype = np.float32) # Compute the Fundamental matrix for the images and iage masks F, mask = cv2.findFundamentalMat(pts1, pts2, cv2.RANSAC) # Considering only the internal points pts1 = pts1[mask.ravel() == 1] pts2 = pts2[mask.ravel() == 1] img_size = (img1.shape[1], img1.shape[0]) #Computing the individual homographies to rectify the images P, H1, H2 = cv2.stereoRectifyUncalibrated(pts1, pts2, F, img_size) # Transforming the images subjected to the homographies img1_corrected = cv2.warpPerspective(img1, H1, img_size) img2_corrected = cv2.warpPerspective(img2, H2, img_size) return img1_corrected, img2_corrected . img1 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_1.jpg&#39;),cv2.COLOR_BGR2RGB) img2 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_2.jpg&#39;),cv2.COLOR_BGR2RGB) a,b = stereoRectifyImages(img1, img2) fig = plt.figure(figsize=(16,16)) plt.subplot(1, 2, 1),plt.imshow(a.astype(np.uint8)) plt.axis(&#39;off&#39;) plt.subplot(1, 2, 2),plt.imshow(b.astype(np.uint8)) plt.axis(&#39;off&#39;) plt.show() . src_pts = np.array([[120,64], [146,52], [79,113], [22,72], [160,175], [204,121], [20,20], [15,180], [50,30], [220,10], [200,80], [250,150], [100,100], [150,190]]) dest_pts = [] neb = 7 for src in src_pts: dest_pts.append(getCorrespondance(b, b[src[0]-int(neb/2):src[0]+int(neb/2)+1, src[1]-int(neb/2):src[1]+int(neb/2)+1])) dst_pts = np.asarray(dest_pts) draw_matches(a, b, src_pts, dst_pts) . [120 64] [120 64] [146 52] [146 52] [ 79 113] [ 79 113] [22 72] [22 72] [160 175] [160 175] [204 121] [204 121] [20 20] [20 20] [ 15 180] [ 15 180] [50 30] [50 30] [220 10] [220 10] [200 80] [200 80] [250 150] [250 150] [100 100] [100 100] [150 190] [150 190] . We observe that the correspondes on the rectified images are much better than the un rectifies images . 3. Plotting Epipolar lines . In Epipolar geometry, To find epipolar lines from 2 images of the same scene taken from different views, the corresponding matching points are found using SIFT feature detector. The Fundamental martix is computed from the points and then the epipolar lines are computed using the 8 point algorithm. . def drawlines(img1,img2,lines,pts1,pts2): &#39;&#39;&#39; img2 - image on which we draw the epilines for the points in img1 lines - corresponding epilines &#39;&#39;&#39; r,c,_ = img1.shape for r,pt1,pt2 in zip(lines,pts1,pts2): color = tuple(np.random.randint(0,255,3).tolist()) x0,y0 = map(int, [0, int(-r[2]/r[1]) ]) x1,y1 = map(int, [c, int(-(r[2]+r[0]*c)/r[1]) ]) img1 = cv2.line(img1, (x0,y0), (x1,y1), color,1) img2 = cv2.circle(img2,tuple(pt2),4,color,-1) img2 = cv2.line(img2,(x0,y0), (x1,y1),color,1) return img1,img2 . def findEpipolarLines(img1, img2): &#39;&#39;&#39; Computes the epipolar lines for corresponding points of image 1 in image 2 &#39;&#39;&#39; pts1 = [] pts2 = [] img1_gray = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY) img2_gray = cv2.cvtColor(img2, cv2.COLOR_RGB2GRAY) kpsA, featuresA = detectAndDescribe(img1_gray, method=feature_extractor) kpsB, featuresB = detectAndDescribe(img2_gray, method=feature_extractor) matches = matchKeyPointsKNN(featuresA, featuresB, ratio=0.2) for mat in matches: pts1.append(kpsA[mat.queryIdx].pt) pts2.append(kpsB[mat.trainIdx].pt) pts1 = np.asarray(pts1, dtype = np.float32) pts2 = np.asarray(pts2, dtype = np.float32) F, mask = cv2.findFundamentalMat(pts1, pts2, cv2.RANSAC) pts1 = pts1[mask.ravel() == 1] pts2 = pts2[mask.ravel() == 1] # Find epilines corresponding to points in left image (first image) and # drawing its lines on right image lines1 = cv2.computeCorrespondEpilines(pts1.reshape(-1,1,2), 2,F) lines1 = lines1.reshape(-1,3) img5,img6 = drawlines(img2,img1,lines1,pts1,pts2) fig = plt.figure(figsize=(16,16)) plt.subplot(121),plt.imshow(img6),plt.axis(&#39;off&#39;) plt.subplot(122),plt.imshow(img5),plt.axis(&#39;off&#39;) plt.show() . img1 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_1.jpg&#39;),cv2.COLOR_BGR2RGB) img2 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_2.jpg&#39;),cv2.COLOR_BGR2RGB) findEpipolarLines(img1, img2) . &lt;ipython-input-33-000a0941c017&gt;:12: DeprecationWarning: an integer is required (got type numpy.float32). Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python. img2 = cv2.circle(img2,tuple(pt2),4,color,-1) . 4. Greedy Correspondance Computation . def plot_matching_greedy(img, pts1, pts2, offset = 0, sz = 3): &#39;&#39;&#39; Plots the computed Corresponding points &#39;&#39;&#39; if offset == 0: offset = int(img.shape[1] / 2) for i in range(pts1.shape[0]): color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) cv2.line(img, (int(pts1[i][1]), int(pts1[i][0])), (int(pts2[i][1]) + offset, int(pts2[i][0])), (255, 0, 0), 1) cv2.circle(img, (int(pts1[i][1]), int(pts1[i][0])), 1, color, sz) cv2.circle(img, (int(pts2[i][1]) + offset, int(pts2[i][0])), 1, color, sz) . def getGreedyMatch(img, patch, st_idx, row, stride = 1): &#39;&#39;&#39; Computes the corresponding point in the 2nd image using intensity based correlation &#39;&#39;&#39; img = img.astype(np.float64) patch = patch.astype(np.float64) sz = patch.shape[0] bestVal = 0 pos = -1 c = 0 for i in range(row, row + 1): similar = 0 for j in range(st_idx, img.shape[1] - int(sz / 2), stride): v = img[i - int(sz / 2): i + int(sz / 2) + 1, j - int(sz / 2): j + int(sz / 2) + 1].flatten() v = v - np.mean(v) p = patch.flatten() - np.mean(patch.flatten()) similar = max(similar, intensityCorrelation(v, p)) if bestVal &lt; similar: bestVal = similar pos = [i, j] return pos . def greedilyIntensityBasedMatching(img1, img2, neighbourhood, row_stride = 50, col_stride = 50): &#39;&#39;&#39; Computes the corresponding points using greedy thresholding &#39;&#39;&#39; pts2 = [] pts1 = [] for i in range(int(neighbourhood / 2), img1.shape[0] - int(neighbourhood / 2), row_stride): threshold = int(neighbourhood / 2) for j in range(int(neighbourhood / 2), img1.shape[1] - int(neighbourhood / 2), col_stride): r = i c = j if(img1[r][c][0] == 0 and img1[r][c][1] == 0 and img1[r][c][2] == 0): continue correspondence = getGreedyMatch(img2, img1[r - int(neighbourhood / 2) : r + int(neighbourhood / 2) + 1, c - int(neighbourhood / 2): c + int(neighbourhood / 2) + 1], threshold, r) try: k = correspondence[0] except: continue pts2.append(correspondence) pts1.append([r, c]) threshold = correspondence[1] + 1 pts2 = np.asarray(pts2) pts1 = np.asarray(pts1) return pts1, pts2 . def display_images(images, rows, cols, size, title, subtitles): &#39;&#39;&#39; Display the greedy corresponding image stiched &#39;&#39;&#39; %matplotlib inline fig = plt.figure(figsize = size) c = 0 sz = len(images) for i in range(rows): for j in range(cols): if sz == c: break ax1 = fig.add_subplot(rows, cols, c + 1) ax1.imshow(images[c].astype(np.uint8), cmap = &#39;gray&#39;) ax1.set_title(subtitles[c], fontsize = 20) c = c + 1 plt.show() . import random images = [] subtitles = [] img1 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_1.jpg&#39;),cv2.COLOR_BGR2RGB) img2 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_2.jpg&#39;),cv2.COLOR_BGR2RGB) img1, img2 = stereoRectifyImages(img1, img2) img = np.zeros((max(img1.shape[0], img2.shape[0]), img1.shape[1] + img2.shape[1], 3)) img = img.astype(np.uint8) img[0:img1.shape[0], 0:img1.shape[1], :] = img1 img[0:img2.shape[0], img1.shape[1]:, :] = img2 pts1 = np.array([373]) pts1, pts2 = greedilyIntensityBasedMatching(img1, img2, 11) plot_img = copy.deepcopy(img) plot_matching_greedy(plot_img, pts1, pts2) images.append(plot_img) subtitles.append(&#39;Greedily Intensity based Matching&#39;) display_images(images, 1, 1, (50, 50), &#39;&#39;, subtitles) . 5. Bonus: SIFT based matching . def detectKeyPoints(img): &#39;&#39;&#39; Compute and describe the key points and feature descriptors &#39;&#39;&#39; sift = cv2.ORB_create() kp1, des1 = sift.detectAndCompute(img, None) # Return Keypoint and Descriptors return kp1, des1 . def findMatches(img1, img2, ratio = 0.7): &#39;&#39;&#39; Finds and returns the matching points &#39;&#39;&#39; kp1, des1 = detectKeyPoints(img1) kp2, des2 = detectKeyPoints(img2) bf = cv2.BFMatcher() matches = bf.knnMatch(des1, des2, k = 2) pts1 = [] pts2 = [] # Apply ratio test good = [] for m,n in matches: if m.distance &lt; ratio*n.distance: good.append(m) for mat in good: pts1.append(kp1[mat.queryIdx].pt) pts2.append(kp2[mat.trainIdx].pt) pts1 = np.asarray(pts1, dtype = np.float32) pts2 = np.asarray(pts2, dtype = np.float32) return pts1, pts2 . def plot_matching(img, pts1, pts2, offset = 0): &#39;&#39;&#39; Plots the matching keypoints in both images &#39;&#39;&#39; if offset == 0: offset = int(img.shape[1] / 2) for i in range(pts1.shape[0]): cv2.line(img, (int(pts1[i][1]), int(pts1[i][0])), (int(pts2[i][1]) + offset, int(pts2[i][0])), (255, 0, 0), 1) cv2.circle(img, (int(pts1[i][1]), int(pts1[i][0])), 1, (255, 0, 0), 4) cv2.circle(img, (int(pts2[i][1]) + offset, int(pts2[i][0])), 1, (255, 0, 0), 4) . img1 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_1.jpg&#39;),cv2.COLOR_BGR2RGB) img2 = cv2.cvtColor(cv2.imread(&#39;../images/Stereo Correspondence/1_2.jpg&#39;),cv2.COLOR_BGR2RGB) r,c,_ = img1.shape img = np.zeros((r,2*c,3)) img[:,:c,:] = img1 img[:,c:,:] = img2 images = [] subtitles = [] # Dense SIFT based Matching dense_sift_matching = copy.deepcopy(img) pts1, pts2 = findMatches(img1, img2) plot_matching(dense_sift_matching, pts1, pts2) images.append(dense_sift_matching) subtitles.append(&#39;Dense SIFT&#39;) display_images(images, 1, 1, (50, 50), &#39;&#39;, subtitles) . SIFT based matching gives much better results as conpared to intensity correlation based matching. .",
            "url": "https://saiamrit.github.io/technical-blog/2020/04/19/stereo.html",
            "relUrl": "/2020/04/19/stereo.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://saiamrit.github.io/technical-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://saiamrit.github.io/technical-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Posts .",
          "url": "https://saiamrit.github.io/technical-blog/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saiamrit.github.io/technical-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}